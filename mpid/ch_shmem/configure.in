
dnl Caching is usually WRONG for systems with cross-mounted file systems
dnl (the cache file may correspond to a different system).  Since configure
dnl is not on a performance-critical path, go for robustness over speed.
dnl
define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl
AC_INIT()
AC_PREREQ(2.13)  dnl For search_libs
AC_CONFIG_HEADER(mpich-mpid.h)

AC_CROSS_CHECK()

AC_ARG_ENABLE(yield,
[--enable-yield - Turn on use of process yield when waiting for a message.
The default is yes.  The value allows a particular yield routine to be chosen.
The choices include
    yes - use the default (either POSIX sched_yield or none)
    sched_yield - POSIX sched_yield
    select - select with a zero timeout 
    sginap - IRIX only function to yield
    dynamic - chose between sched_yield, select, and none at runtime
              with the environment variable MPICH_YIELD],
,enable_yield=yes)

AC_ARG_ENABLE(processgroup,
[--enable-processgroup - Use a separate process group for the MPICH processes],
,enable_processgroup=default)

# Solaris has -lthread containing mutex_init
AC_CHECK_LIB(thread,mutex_init)

AC_CHECK_HEADERS(sched.h errno.h)
use_select_yield=no
have_sched_yield=no
case $enable_yield in
    no)
        # Do nothing
	;;
    yes|sched_yield)
	# Solaris hides sched_yield in the rt library
	AC_SEARCH_LIBS(sched_yield,rt,have_sched_yield=yes)
	if test "$have_sched_yield" = "yes" ; then
	    AC_DEFINE(USE_SCHED_YIELD,,[define to use POSIX sched_yield])
	else
	    # Hook to allow us to make this the alternate default
            use_select_yield=no
	fi
	;;	
    sginap)
        AC_CHECK_FUNC(sginap,
	AC_DEFINE(USE_SGINAP_YIELD,,[define to use sginap to yield]))
        ;;
    yield)
        # AIX 4.2 has yield
        AC_CHECK_FUNC(yield,
	AC_DEFINE(USE_YIELD_YIELD,,[define to use yield to yield]))
	;;
    select)
        # Assume that we can always use select
        use_select_yield=yes
	;;
    dynamic)
	AC_SEARCH_LIBS(sched_yield,rt,have_sched_yield=yes)
	if test "$have_sched_yield" = "yes" ; then
	    AC_DEFINE(USE_DYNAMIC_YIELD,,[define to dynamically select yield])
	fi
	;;
    *)
	AC_MSG_WARN([Unrecognized yield method $enable_yield])
	;;
esac
if test "$use_select_yield" = "yes" ; then
    AC_DEFINE(USE_SELECT_YIELD,,[define to use select to yield])
fi
#
# Check for other lock routines
# IRIX
# usnewlock is a macro, so we need to use try_link
# Also, it must be combined with the arenas code
AC_MSG_CHECKING(for usnewlock)
AC_TRY_LINK([
#include <ulocks.h>],[
ulock_t l;
usptr_t *p;
l = usnewlock(p);],
AC_MSG_RESULT(yes)
found_shmem=1
AC_DEFINE(HAVE_USLOCKS)
AC_DEFINE(PREFER_SPINLOCKS)
AC_DEFINE(PREFER_USLOCKS)
AC_DEFINE(HAVE_ARENAS)
AC_DEFINE(PREFER_ARENAS),
AC_MSG_RESULT(no))
# (still need to define PREFER_SPINLOCKS)

# SX-4
AC_CHECK_FUNC(tslock_init,
AC_DEFINE(HAVE_TSLOCKS)
AC_DEFINE(PREFER_TSLOCKS))

# the C compiler might include this for us, but the Fortran compiler
# does not

# We need to test for particular routines
AC_SEARCH_LIBS(gethostbyname,nsl)
# I can't find a system that even *has* librpc .
dnl AC_SEARCH_LIBS(,rpc)

# Shared-memory (processes) device.  Only need to set mpirun default machine.
AC_CHECK_FUNCS(msem_init,have_msem_init=1)
if test "$have_msem_init" = 1 ; then
    # If have msem_init, we need to see if we need struct msemaphore or just
    # msemaphore.
    AC_MSG_CHECKING([Is msemaphore a typedef or struct name?])
    AC_TRY_COMPILE([
#include <ctype.h>
#include <sys/mman.h>],[
typedef struct msemaphore MPID_Msemaphore;
typedef struct { MPID_Msemaphor lock; int a; } Msem;
Msem sem;
       ],is_struct=1,is_struct=0)
     if test $is_struct = 1 ; then
	AC_DEFINE(MSEMAPHORE_IS_STRUCT)
	AC_MSG_RESULT(struct)
     else
	AC_MSG_RESULT(typedef)
     fi
fi
#
# Here's a horrible "feature".  Solaris includes null stubs for 
# mutex_init in libc (!), so that users can build threaded code that
# doesn't work (rather than putting this null stubs in -lnothread, 
# where they belong).  Thus, if mutex_init IS found, we need to 
# check for -lthread.   (Which we should have done above)
#
AC_CHECK_FUNCS(mutex_init strerror shmat semop mmap sem_post)

# atexit registers a function to be called at normal process termination
# This allows us to add a function to release resources if the user
# calls exit or forgets to call MPI_Finalize.  It doesn't help with 
# abnormal termination
AC_CHECK_FUNCS(atexit)

# Check for a working mmap.
rm -f mconftest1.out
MMAP=0
AC_MSG_CHECKING([that shared, anonymous mmap works])
AC_TRY_RUN([
#include <stdio.h>
#include <sys/mman.h>
#include <fcntl.h>
#ifdef HAVE_STRERROR
#include <errno.h>
#endif
int main()
{
int fd;	
char *mem;
int memsize = 4 * 1024 * 1024;
FILE *reasonfd;

reasonfd = fopen( "mconftest1.out", "w" );
if (!reasonfd) reasonfd = stderr;

#if !defined(MAP_ANONYMOUS) && !defined(MAP_VARIABLE)
    /* In LINUX, we should try to open a large enough file of zeros.
       We can create a temp file, open it, write 0-filled blocks to 
       it, and mark it delete on close.  If you can create a
       /dev/zero.mpi file, try that.
     */
    fd = open("/dev/zero", O_RDWR);
    if (fd < 0) {
	fprintf( reasonfd, "Failed to open /dev/zero\n" );
	return 1;
    }
    fprintf( reasonfd, "mmap on /dev/zero\n" );
    mem = (char *) mmap((caddr_t) 0, memsize,
			PROT_READ|PROT_WRITE|PROT_EXEC,
			MAP_SHARED, 
			fd, (off_t) 0);
    fprintf( reasonfd, "mmap call was\n\
    mem = (char *) mmap((caddr_t) 0, memsize,\n\
			PROT_READ|PROT_WRITE|PROT_EXEC,\n\
			MAP_SHARED, \n\
			fd, (off_t) 0);\n" );

#elif defined(MAP_ANONYMOUS) && !defined(MAP_VARIABLE)
    /* This might work for LINUX eventually:
       Current problem: LINUX doesn't accept MAP_ANONYMOUS and 
       MAP_SHARED (MAP_PRIVATE is ok)  */
    fprintf( reasonfd, "mmap anonymous with -1 fd\n" );
    mem = (char *) mmap((caddr_t) 0, memsize,
			PROT_READ|PROT_WRITE|PROT_EXEC,
			MAP_SHARED|MAP_ANONYMOUS,
			-1, (off_t) 0);
    fprintf( reasonfd, "mmap call was\n\
    mem = (char *) mmap((caddr_t) 0, memsize,\n\
			PROT_READ|PROT_WRITE|PROT_EXEC,\n\
			MAP_SHARED|MAP_ANONYMOUS,\n\
			-1, (off_t) 0);\n" );

#else
    fprintf( reasonfd, "mmap anonmyous variable with -1 fd\n" );
    mem = (char *) mmap((caddr_t) 0, memsize,
			PROT_READ|PROT_WRITE|PROT_EXEC,
			MAP_SHARED|MAP_ANONYMOUS|MAP_VARIABLE, 
			-1, (off_t) 0);
    fprintf( reasonfd, "mmap call was\n\
    mem = (char *) mmap((caddr_t) 0, memsize,\n\
			PROT_READ|PROT_WRITE|PROT_EXEC,\n\
			MAP_SHARED|MAP_ANONYMOUS|MAP_VARIABLE, \n\
			-1, (off_t) 0);\n" );
#endif
if (mem == (char*) -1) {
    fprintf( reasonfd, "mmap returned -1 (failure)" );
#if defined(HAVE_STRERROR)
    fprintf( reasonfd, ": %s\n", strerror( errno ) );
#else
    fprintf( reasonfd, "\n" );
#endif
    return 1; 
}
return 0;
}
],
AC_MSG_RESULT(yes)
MMAP=1,
AC_MSG_RESULT(no)
if test -s mconftest1.out ; then 
    cat mconftest1.out >>config.log 
    #echo "Reason: "
    #cat mconftest1.out
fi
AC_MSG_WARN([mmap does not work with MAP_SHARED and MAP_ANONYMOUS
Some systems (e.g., LINUX) only allow MAP_PRIVATE
and MAP_ANONYMOUS.  MPICH requires MAP_SHARED when
using MAP_ANONYMOUS.
MPICH will attempt to use SYSV shared memory instead of mmap.])

AC_DEFINE(HAVE_NO_ANON_MMAP),true)
rm -f mconftest1.out

# We need to check that semctl is ok.
PAC_SEMGET_WORKS(SEMGET=1,SEMGET=0,[AC_MSG_WARN])

if test $MMAP = 0 -a "$SEMGET" = 0; then
    AC_MSG_WARN([Configure detected that both anonymous mmap and semget fail.
Configuring MPICH for shared memory may cause problems!])
fi

if test "$SEMGET" = "1" ; then
    AC_DEFINE(HAVE_SEMGET)
fi

AC_CHECK_FUNCS(setsid isatty)
if test "$enable_processgroup" = "default" -o \
        "$enable_processgroup" = "yes" ; then
    AC_DEFINE(SET_NEW_PGRP,,[Define to force a new process group])
fi


# XOPEN mandates that union semun NOT be defined(!)
AC_MSG_CHECKING(for union semun)
AC_TRY_COMPILE([#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>],[
union semun arg;arg.val=0;],AC_MSG_RESULT(defined),
AC_DEFINE(SEMUN_UNDEFINED)
AC_MSG_RESULT(undefined))
#
# See if we can use an int in semctl or if we need the union
AC_MSG_CHECKING(whether semctl needs union semun)
AC_TRY_COMPILE([#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>],[
int arg = 0; semctl( 1, 1, SETVAL, arg );],AC_MSG_RESULT(no),
AC_DEFINE(SEMCTL_ARG_UNION)
AC_MSG_RESULT(yes))
#
# This should check for shmat and semop first
if test "$usesysv" = 1 ; then
    AC_DEFINE(SHMEM_PICKED)
    AC_DEFINE(USE_SHMAT)
    AC_DEFINE(LOCKS_PICKED)
    AC_DEFINE(USE_SEMOP)
    # we must undefine any other USE_xxx chosen
fi
#
# At this point, we should be able to select some locks.  Make sure we
# can.  We include p2p_special because some values are set there that
# p2p_locks uses (e.g., MPID_CACHE_LINE_SIZE)
AC_MSG_CHECKING([that usable shared memory locks were found])
AC_TRY_LINK([
#include "$srcdir/p2p_special.h"
#include "$srcdir/p2p_locks.h"
],
[int i;],
AC_MSG_RESULT(yes),
AC_MSG_RESULT(no)
AC_MSG_ERROR([Cannot build ch_shmem without shared memory locks])
)
#
# Check for important headers
AC_CHECK_HEADERS(stdlib.h unistd.h)
#
# Look for sigaction routine (instead of signal)
AC_CHECK_HEADERS(signal.h)
AC_CHECK_FUNCS(sigaction)
# To use sigaction, you also need the struct sigaction.  We've had
# some systems mess this up
AC_MSG_CHECKING(for struct sigaction)
AC_TRY_COMPILE([#include <signal.h>],[
struct sigaction act; sigaddset( &act.sa_mask, SIGINT );],sigaction_ok="yes",sigaction_ok="no")
AC_MSG_RESULT($sigaction_ok)
AC_CHECK_FUNCS(sigprocmask signal sigmask sigset)
# If using sigprocmask, we need to check that segset_t is defined.  At least
# one SGI installation had trouble with this.
if test "$ac_cv_func_sigprocmask" = "yes" ; then
    AC_MSG_CHECKING([that sigset_t is defined])
    AC_TRY_LINK([
#include <signal.h>
],[sigset_t newset;],
AC_MSG_RESULT(yes),
AC_MSG_RESULT(no)
AC_MSG_ERROR([Your system claims to support sigprocmask but does not define
sigset_t.  Please check your system include files])
)
fi
# Also need to get signal hander arg count 1? 3? 4? something else?
PAC_SIGNALS_WORK
AC_RETSIGTYPE
#
AC_CHECK_FUNCS(gettimeofday BSDgettimeofday)
AC_OUTPUT(localdefs)
