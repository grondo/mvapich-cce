dnl Process this file with autoconf to produce a configure script.
# Autoconf initialization:
AC_INIT(mpd.c)
AC_PREREQ(2.13)                 dnl needed for SHELL
# Autoconf header:
rm -f ${srcdir}/mpdconf.h mpdconf.h
AC_CONFIG_HEADER(mpdconf.h)

dnl Process configure arguments
AC_ARG_ENABLE(echo,
   [--enable-echo - turn on echoing from within configure script],
   set -x)
CONFIGURE_ARGS="$*"
if test -n "$CONFIGURE_ARGS" ; then 
    echo "Configuring with args $CONFIGURE_ARGS"
fi
AC_SUBST(COPTIONS)
dnl add --enable-strict and --enable-g
PAC_ARG_CC_COMMON

AC_ARG_ENABLE(root,
   [--enable-root - enable mpd to run as root])
if test "$enable_root" = "yes" ; then 
   COPTIONS="${COPTIONS} -DROOT_ENABLED"
fi

AC_ARG_ENABLE(g, [--enable-g  - turn on debugging flags ] )
if test "$enable_g" = "yes" -o "$enable_g" = "all" ; then
    COPTIONS="${COPTIONS} -g"
fi

AC_ARG_WITH(rpmbindir,[
--with-rpmbindir - Define the location of bin files for an rpm],,)

dnl Handle caching safely
# Handling caching
PAC_ARG_CACHING

dnl Handle case of configuring within MPICH build
# Testing for MPICH build
PAC_ARG_MPICH_BUILDING 

dnl Checks for programs.
# Checking for programs.
PAC_PROG_CC
PAC_PROG_MAKE
AC_PROG_LN_S
AC_PROG_RANLIB
AC_CHECK_PROG(GDB,gdb,1,0)

# In case clinker is not defined
if test -z "$CLINKER" ; then 
    CLINKER="$CC"
    AC_SUBST(CLINKER)
fi
dnl Create command to process dependencies
#   Create command to process dependencies
dnl PAC_C_DEPENDS

dnl Checks for libraries.
# Searching libraries instead of checking
AC_SEARCH_LIBS(gethostbyname, nsl)
AC_SEARCH_LIBS(socket, socket)
dnl If -lcrypt should not be added to LIBS, use the same approach as in
dnl mpid/server/configure.in 
AC_SEARCH_LIBS(crypt,crypt)

dnl Checks for header files.
# Checking headers
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h strings.h sys/time.h unistd.h stdlib.h)
dnl In Solaris, the crypt function is not defined in unistd unless 
dnl _XOPEN_SOURCE is defines and _XOPEN_VERSION is 4 or greater.
dnl We test by looking for a missing crypt by defining our own
dnl incompatible one and trying to compile it
PAC_FUNC_CRYPT
dnl
PAC_HEADER_STDARG(,AC_MSG_ERROR([mpd requires C-standard stdarg]))

dnl Checks for typedefs, structures, and compiler characteristics.
# Checking typedefs, structures, and compiler characteristics.
dnl AC_TYPE_PID_T
AC_MSG_CHECKING([for pid_t defined])
AC_TRY_COMPILE([#include <sys/types.h>],
[pid_t a;],ac_cv_pid_t=yes,ac_cv_pid_t=no)
AC_MSG_RESULT($ac_cv_pid_t)
if test "$ac_cv_pid_t" = "no" ; then
    AC_DEFINE(pid_t,int,[Define as int if not defined in sys/types.h])
fi
AC_HEADER_TIME
AC_C_CONST
#
# The following are necessary for AIX in particular because in 64 bit mode,
# some of the socket functions use size_t (unsigned long, 64 bits) instead of
# int (signed int, 32 bits) as a return value.  Getting the wrong type
# causes all sorts of chaos.  Unfortunately, there isn't any consensus on what
# the arguments *should* be.
found_sockopt_type=0
AC_MSG_CHECKING([if getsockopt wants socklen_t])
AC_TRY_COMPILE([#include <sys/types.h>
#include <sys/socket.h>],[socklen_t dummy; int rc, skt; void *ssz;
rc = getsockopt(skt,SOL_SOCKET,SO_SNDBUF,ssz,&dummy);],found_sockopt_type=1)
if test $found_sockopt_type = 1 ; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(USE_SOCKLEN_T)
else
    AC_MSG_RESULT(no)
    # This case is harder.  size_t is a valid type, but it may not be the 
    # one that getsockopt etc wants.
    AC_MSG_CHECKING([if getsockopt wants size_t])
    PAC_C_TRY_COMPILE_CLEAN([#include <sys/types.h>
#include <sys/socket.h>],[int try(void){size_t dummy; int rc, skt; void *ssz;
rc = getsockopt(skt,SOL_SOCKET,SO_SNDBUF,ssz,&dummy);
return rc;}],found_sockopt_type)
    case $found_sockopt_type in 
	0) AC_MSG_RESULT(yes)
	   AC_DEFINE(USE_SIZE_T_FOR_SOCKLEN_T)
	;;
	1) AC_MSG_RESULT([no (warnings from compiler)])
	;;
	2) AC_MSG_RESULT(no)
	;;
    esac
fi


dnl Checks for library functions.
# Checking library functions
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(getcwd gethostname gettimeofday putenv select socket strsignal strtok_r mkstemp)

dnl Check whether you need to declare strtok_r (AIX and Solaris do)
if test "$ac_cv_func_strtok_r" = "yes" ; then
    AC_MSG_CHECKING([whether strtok_r needs a declaration])
    AC_TRY_COMPILE([#include <string.h>],[
char *a, *c; const char *b; 
char *tmp=strtok_r( a, b, &c );],needs_strtok_r=no,needs_strtok_r=yes)
    AC_MSG_RESULT($needs_strtok_r)
    if test "$needs_strtok_r" = "yes" ; then
        AC_DEFINE(NEEDS_STRTOK_R_DECL,1,[define if strtok_r requires a decl])
    fi
fi
dnl
dnl Check whether you need to declare strsignal (most do)
dnl We do this by trying to compile a program that uses strsignal
dnl *incorrectly* and we see if the compiler catches it
dnl
if test "$ac_cv_func_strsignal" = "yes" ; then
    AC_MSG_CHECKING([whether strsignal needs a declaration])
    AC_TRY_COMPILE([#include <string.h>],[
char *tmp=strsignal( "a", 1 );],needs_strsignal=yes,needs_signal=no)
    AC_MSG_RESULT($needs_strsignal)
    if test "$needs_strsignal" = "yes" ; then
        AC_DEFINE(NEEDS_STRSIGNAL_DECL,1,[define if strsignal requires a decl])
    fi
fi
dnl
dnl Unfortunately, autoheader isn't sophisticated enough to handle
dnl DEFINE_UNQUOTED.
dnl PAC_FUNC_NEEDS_DECL([#include <unistd.h>],readlink)

if test "$with_rpmbindir" != "no" -a "$with_rpmbindir" != "yes" -a \
        -n "$with_rpmbindir" ; then
    # The : is because this is used to extend a path list
    other_bindir=":$with_rpmbindir"
    AC_SUBST(other_bindir)
fi
dnl Output:
# Starting output
MPD_HOME=`pwd`
AC_SUBST(MPD_HOME)
AC_OUTPUT_COMMANDS(chmod +x startdaemons)
AC_OUTPUT(Makefile startdaemons)
