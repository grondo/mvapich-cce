dnl
dnl rcsid = $Header: /home/MPI/cvsMaster/mpich/mpid/server/configure.in,v 1.16 2004/07/02 21:05:34 gropp Exp $
dnl
dnl Caching is usually WRONG for systems with cross-mounted file systems
dnl (the cache file may correspond to a different system).  Since configure
dnl is not on a performance-critical path, go for robustness over speed.
dnl
define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl
AC_INIT(serv_p4.c)
AC_PREREQ(2.13) dnl for SHELL and AC_SEARCH_LIBS
AC_CONFIG_HEADER(server.h)
# Ensure that we don't pickup the wrong version of server.h in the VPATH case
# (ac_confdir will have to do for top_srcdir)
rm -f ${ac_confdir}/server.h
AC_PROG_CC
AC_PROG_RANLIB
# Check for VPATH
MAKE=${MAKE:-make}
PAC_MAKE_VPATH
# Some systems require -lsocket -lnsl (e.g., Solaris)
# Note that the Configure version 2 macro REQUIRES that you provide a 
# function to check with.  This would be ok if the function didn't
# require TWO libraries on some systems!
AC_SEARCH_LIBS(xdr_array,nsl)
AC_SEARCH_LIBS(socket,socket)

dnl Do not add -lcrypt to libs by default
save_LIBS="$LIBS"
AC_SEARCH_LIBS(crypt,crypt)
LIBS="$save_LIBS"
if test "$ac_cv_search_crypt" = "-lcrypt" ; then
	CRYPT_LIBS="-lcrypt"
fi

AC_CHECK_HEADERS(termios.h)
AC_CHECK_HEADERS(fcntl.h)
AC_CHECK_HEADERS(unistd.h)
AC_CHECK_HEADERS(sys/select.h stdlib.h)
AC_CHECK_FUNCS(index rindex)
AC_CHECK_FUNCS(seteuid setresuid)
AC_CHECK_FUNCS(setegid setresgid)
AC_CHECK_KERBEROS
AC_CHECK_AFS
dnl HAVE_SSL
AC_CHECK_SSL
dnl IWAY
AC_ARG_ENABLE(IWAY,[ --enable-IWAY support IWAYl],AC_CHECK_IWAY)
AC_ARG_WITH(INCLUDE,
[ --with-include=dirs - add dirs to the list of directories to search for
 tools such as ssl ],,with_include=none)
if test "$with_include" != "none" ; then
    # This variable is used in the FIND_USER_INCLUDE command
    USER_INCLUDE_DIRS="$with_include"
fi
AC_CHECK_HEADERS(strings.h string.h)
AC_CHECK_FUNCS(getopt)
AC_CHECK_FUNCS(strerror)
dnl HAVE_BSD_SIGNAL
AC_CHECK_POSIX_SIGNAL
dnl HAVE_UNION_WAIT
if test "$ac_cv_check_posix_signal" = "no" ; then
    AC_CHECK_UNION_WAIT
    AC_FUNC_WAIT3
fi
AC_CHECK_FUNCS(setpgrp)
dnl Check the binding of setpgrp
AC_FUNC_SETPGRP
dnl
dnl There are two incompatible setpgrp functions.  One takes two args, the
dnl other takes zero.
dnl AC_MSG_CHECKING(for number of arguments to setpgrp)
dnl
dnl Really need to have the correct include files with the compilation header
dnl Many systems prototype setpgrp in unistd.h
dnl AC_TRY_COMPILE(
dnl #include <unistd.h>
dnl ,setpgrp(0,0);,two_ok=1,two_ok=0)
dnl if test $two_ok = 1 ; then 
dnl     AC_MSG_RESULT(2)
dnl     AC_DEFINE(SETPGRP_HAS_TWO_ARGS)
dnl else
dnl    AC_MSG_RESULT(0)
dnl fi
dnl
#
# The following are necessary for AIX in particular because in 64 bit mode,
# some of the socket functions use size_t (unsigned long, 64 bits) instead of
# int (signed int, 32 bits) as a return value.  Getting the wrong type
# causes all sorts of chaos.  Unfortunately, there isn't any consensus on what
# the arguments *should* be.
found_sockopt_type=0
AC_MSG_CHECKING([if getsockopt wants socklen_t])
AC_TRY_COMPILE([#include <sys/types.h>
#include <sys/socket.h>],[socklen_t dummy; int rc, skt; void *ssz;
rc = getsockopt(skt,SOL_SOCKET,SO_SNDBUF,ssz,&dummy);],found_sockopt_type=1)
if test $found_sockopt_type = 1 ; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(USE_SOCKLEN_T)
else
    AC_MSG_RESULT(no)
    # This case is harder.  size_t is a valid type, but it may not be the 
    # one that getsockopt etc wants.
    AC_MSG_CHECKING([if getsockopt wants size_t])
    PAC_C_TRY_COMPILE_CLEAN([#include <sys/types.h>
#include <sys/socket.h>],[int try(void){size_t dummy; int rc, skt; void *ssz;
rc = getsockopt(skt,SOL_SOCKET,SO_SNDBUF,ssz,&dummy);
return rc;}],found_sockopt_type)
    case $found_sockopt_type in 
	0) AC_MSG_RESULT(yes)
	   AC_DEFINE(USE_SIZE_T_FOR_SOCKLEN_T)
	;;
	1) AC_MSG_RESULT([no (warnings from compiler)])
	;;
	2) AC_MSG_RESULT(no)
	;;
    esac
fi
# 
# In the case of size_t, the problem is that the compiler might accept size_t,
# even when it is the wrong type.  We have an ac_TRY_COMPILE_CLEAN command
# for autoconf version 1 that is careful about discriminating between a
# completely clean compile and one with messages.
dnl if test $found_sockopt_type = 0 ; then
dnl     AC_MSG_CHECKING([if getsockopt wants size_t])
dnl    AC_TRY_COMPILE([#include <sys/types.h>
dnl #include <sys/socket.h>],[size_t dummy; int rc, skt; void *ssz;
dnl rc = getsockopt(skt,SOL_SOCKET,SO_SNDBUF,ssz,&dummy);],found_sockopt_type=1)
dnl     if test $found_sockopt_type = 1 ; then
dnl 	AC_MSG_RESULT(yes)
dnl        AC_DEFINE(USE_SIZE_T_FOR_SOCKLEN_T)
dnl    else
dnl	AC_MSG_RESULT(no)
dnl    fi
dnl fi

AC_ARG_ENABLE(cflags, --enable-cflags=...   additional flags for c compiler,
    CFLAGS="$CFLAGS $enableval")

AC_SUBST($CC)
AC_SUBST(CRYPT_LIBS)dnl
AC_OUTPUT(Makefile)
