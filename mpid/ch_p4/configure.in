dnl
dnl Caching is usually WRONG for systems with cross-mounted file systems
dnl (the cache file may correspond to a different system).  Since configure
dnl is not on a performance-critical path, go for robustness over speed.
dnl
define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl
AC_INIT()

print_error() {
    echo "*# $*" 2>&1 ;
    }

AC_ARG_ENABLE(processgroup,
[--enable-processgroup - Use a separate process group for the MPICH processes],
,enable_processgroup=default)

AC_ARG_WITH(comm,[--with-comm=name - Specify the p4 comm type (typically empty or shared],,
with_comm=default)

AC_CONFIG_HEADER(mpich-mpid.h)

# Get the compiler (should have been set with CC) and check for 
# cross-compiling
AC_PROG_CC

# Check for a working mmap or semget when configuring for comm=shared
if test "$with_comm" = "shared" ; then
    MMAP=0
    PAC_HAVE_ANON_MMAP(MMAP=1,AC_DEFINE(HAVE_NO_ANON_MMAP))
    # We need to check that semctl is ok.
    PAC_SEMGET_WORKS(SEMGET=1,SEMGET=0,print_error)

    if test $MMAP = 0 -a "$SEMGET" = 0; then
        AC_MSG_ERROR( [Configure detected that both anonymous mmap and semget fail.
Configuring MPICH for shared memory may cause problems!] )
    fi
fi

PAC_SIGNALS_WORK
#
if test -z "$RSHCOMMAND" ; then
    machine=`hostname`
    for program in remsh rsh ; do
        # First, check to see if the program exists
        AC_PATH_PROG(RSHCOMMAND,$program)
        if test -n "$RSHCOMMAND" ; then
	    AC_MSG_CHECKING([whether $RSHCOMMAND works])
            output=`$RSHCOMMAND $machine -n true 2>&1 </dev/null`
            if test -n "$output" ; then
		AC_MSG_RESULT([no])
		echo "Errors while trying to run true on $machine with $program"
		echo "$output"
		RSHCOMMAND=""
		# HORRIBLE, TERRIBLE BUG in AUTOCONF!!!
		# It is determined to INCORRECTLY remember some results,
		# while forgetting others (like "cross-compiling")
		unset ac_cv_path_RSHCOMMAND
            else
		AC_MSG_RESULT([yes])
		break
	    fi
        fi
    done
    # Check ssh with special options to avoid user prompting which causes the
    # configure script to "hang"
    if test -z "$RSHCOMMAND" ; then
    	AC_PATH_PROG(RSHCOMMAND, ssh)
    	if test -n "$RSHCOMMAND" ; then
    	    AC_MSG_CHECKING([whether $RSHCOMMAND works])
    	    output=`$RSHCOMMAND -o "StrictHostKeyChecking no" \
    	      -o "BatchMode yes" $machine -n true 2>&1 </dev/null`
    	    if test $? -ne 0 ; then
    		AC_MSG_RESULT([no])
    		echo "Errors while trying to run true on $machine with ssh"
    		echo "$output"
    		RSHCOMMAND=""
    		# HORRIBLE, TERRIBLE BUG in AUTOCONF!!!
    		# It is determined to INCORRECTLY remember some results,
    		# while forgetting others (like "cross-compiling")
    		unset ac_cv_path_RSHCOMMAND
    	    else
    		AC_MSG_RESULT([yes])
    	    fi
    	fi
    fi
fi
if test -z "$RSHCOMMAND" ; then
    AC_MSG_WARN([You must use the secure server to start programs])
fi
# Sizes of int and long (for sendid type)

CROSS_SIZEOF_INT=${CROSS_SIZEOF_INT:-4}
CROSS_SIZEOF_LONG=${CROSS_SIZEOF_LONG:-4}
AC_CHECK_SIZEOF(int,$CROSS_SIZEOF_INT)
AC_CHECK_SIZEOF(long,$CROSS_SIZEOF_LONG)

AC_CHECK_FUNCS(gettimeofday BSDgettimeofday)
# These are needed for the process group
AC_CHECK_FUNCS(setsid isatty)
if test "$enable_processgroup" = "default" -o \
        "$enable_processgroup" = "yes" ; then
    AC_DEFINE(SET_NEW_PGRP,,[Define to force a new process group])
fi
#
# Generate a default machines file
rootdir="../.."
if test ! -s ${rootdir}/util/machines/machines.$ARCH ; then
    if test ! -d ${rootdir}/util ; then mkdir ${rootdir}/util ; fi
    if test ! -d ${rootdir}/util/machines ; then 
        mkdir ${rootdir}/util/machines
    fi
    if test "$COMM" != "bproc" ; then
        HOST=""
        PAC_PROGRAM_CHECK(HOSTNAME_PGM,hostname,,,hostname)
        if test -x "$hostname" ; then
            HOST="`$hostname`"
        fi
        # Note that uname -n may not produce a usable hostname.  
        # Any suggestions?
        if test "$HOST" = "" ; then
            HOST="`uname -n`"
        fi
	echo "Creating util/machines/machines.$ARCH"
        cat > ${rootdir}/util/machines/machines.$ARCH <<EOF
# Change this file to contain the machines that you want to use
# to run MPI jobs on.  The format is one host name per line, with either
#    hostname
# or 
#    hostname:n
# where n is the number of processors in an SMP.  The hostname should
# be the same as the result from the command "hostname"
$HOST
$HOST
$HOST
$HOST
$HOST
EOF
    else
        # bproc version from Rick Niles, slightly modified
	# This gets all possible nodes in the current setup, but 
        #  may include nodes that will never come up/ don't really exist)
        CNT=`bpstat -n`   # Get maximum node count
        INDEX=-1
        while test "$INDEX" -le "$CNT" ; do
	    # Using machines.bproc allows coexistance with other devices
            echo $INDEX >> ${rootdir}/util/machines/machines.bproc
	    # Use expr because some shells (e.g., Solaris's) choke with
	    # ((...)) syntax
            INDEX=`expr $INDEX + 1`
        done
    fi
fi
#
AC_OUTPUT(localdefs)
