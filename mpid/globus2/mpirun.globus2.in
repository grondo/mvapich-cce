#! /bin/sh

#
# Based largely on the mpirun.ch_p4.in file.
#

VMPI=@VMPI@
GLOBUSBINDIR=@GLOBUSBINDIR@

my_subjob_idx=0

createRslJob() {
    my_np=$1
    my_cnt=$2
    my_cmdLineArgs=$3
    my_dirname=$4
    my_progname=$5
    my_stage_file=$6

    while read line; do
        # find out what kind of line it is:
        #  - either a line with a contact string between "..." and an
        #    optional number of procs;
        #  - or a hostname with an optional number of procs.
        if echo "$line" | egrep -s '^[ \t]*"' > /dev/null 2>&1 ; then
           kind="contact"
        else
           kind="host"
        fi
        if [ "$kind" = "host" ]; then
           contact="`echo "$line" | awk '{print $1}'`"
           count="`echo "$line" | awk '{print $2}'`"
        else
           contact=`echo "$line" | awk -F\" '{print $2}'`
           count=`echo "$line" | awk -F\" '{print $3}'`
        fi
        count=`echo "$count" | sed -e 's/[^0-9-]//g'`
        if [ -z "$count" ]; then
           # if no number if provided, default is 1.
           count=1
        elif [ "$count" -lt 1 ]; then
           # in case of zero or negative number of procs, default is 1.
           count=1
        fi

	if [ `expr $count + $my_cnt` -gt $my_np ]; then
	    count=`expr $my_np - $my_cnt`;
	fi

	echo "( &(resourceManagerContact=\"$contact\") "
	echo "   (count=$count)"
        if test $VMPI -ne 0 ; then
	    echo "   (jobtype=mpi)"
	fi
	echo "   (label=\"subjob $my_cnt\")"
	if [ -z "$GLOBUS_LOCATION" ]; then
            #
            # GLOBUS_LOCATION not defined ==> assuming using pre-globus v2.0
            #
            echo "   (environment=(GLOBUS_DUROC_SUBJOB_INDEX $my_subjob_idx))"
        else
            #
            # using globus v2.0 or later which uses shared lib path
            #
            echo "   (environment=(GLOBUS_DUROC_SUBJOB_INDEX $my_subjob_idx)"
            echo "                (LD_LIBRARY_PATH $GLOBUS_LOCATION/lib/))"
        fi
#
# Need to test that $my_cmdLineArgs is non-empty AND that it is
# not equal to a single space because mpirun.args will set $my_cmdLineArgs
# to a single space when there are no args.  This only seems to
# happen on DEC ALPHAs.
#
        if [ -n "$my_cmdLineArgs" -a "$my_cmdLineArgs" != ' ' ]; then
	    echo "   (arguments=$my_cmdLineArgs)"
	fi
	if [ $my_stage_file -eq 0 ]; then
	    echo "   (directory=\"$my_dirname\")"
	    echo "   (executable=\"$my_progname\")"
	else
	    echo "   (executable=\$(GLOBUSRUN_GASS_URL) # \"$my_progname\")"
	fi
	echo ")"

	my_cnt=`expr $my_cnt + $count`
        my_subjob_idx=`expr $my_subjob_idx + 1`
        if [ $my_cnt -eq $my_np ]; then
	    break;
	fi
    done;

    global_count="$my_cnt"
}
#
# If this program was started up without the arguments being passed, we
# must first set up the arguments
#
if [ -z "$argsset" ] ; then
  . $MPIRUN_HOME/mpirun.args
  argsset=1
fi

globus_cleanup_files=""
globus_machine_file=""
globusrun_rsl_file=""
if test -z "$globus_stage_file" ; then
    globus_stage_file=0
fi
if test -z "$globus_dump_rsl" ; then
    globus_dump_rsl=0
fi
#
# "-globusrsl <filename>" sets $globuspgfile=<filename>
# "-machinefile <filename>" sets $machineFile=<filename>
#

if [ -n "$globuspgfile" ] ; then
    globusrun_rsl_file=$globuspgfile

else

    if [ -n "$machineFile" ] ; then
        globus_machine_file=$machineFile
    elif [ -r "machines" ] ; then
        globus_machine_file="machines"
    elif [ -r "$MPIRUN_HOME/machines" ] ; then
        globus_machine_file="$MPIRUN_HOME/machines"
    elif [ -n "$MPIRUN_GLOBUS_CONTACTSTRING" ] ; then
        echo "\"$MPIRUN_GLOBUS_CONTACTSTRING\"" > mpirun.machines
        globus_cleanup_files="$globus_cleanup_files mpirun.machines"
        globus_machine_file=mpirun.machines
    else
        #
        # Machines file not found.
        #
        echo "ERROR: You must specify which machines to run on with one of the following:"
        echo "       \"-globus-rsl filename\" argument"
        echo "       \"-machinefile filename\" argument"
        echo "       A file named \"machines\" in the current directory"
        echo "       A file named \"machines\" in $MPIRUN_HOME"
        echo "       MPIRUN_GLOBUS_CONTACTSTRING environment variable"
        exit 1
    fi

    if [ -z "$globus_machine_file" -a ! -r "$globus_machine_file" ] ; then
        echo "ERROR: machines file \($globus_machine_file\) is not readable"
        exit 1
    fi

    rm -f mpirun.machines.$$
    globus_cleanup_files="$globus_cleanup_files mpirun.machines.$$"

    #
    # Construct an RSL file from $globus_machine_file
    #
    globusrun_rsl_file=mpirun.rsl.$$
    if [ "$leavePGFile" != "1" ] ; then
        globus_cleanup_files="$globus_cleanup_files $globusrun_rsl_file"
    fi

    echo "+" > $globusrun_rsl_file
    dirname=`dirname $progname`;

    cnt=0
    while [ $cnt -lt $np ]; do
	createRslJob "$np" "$cnt" "$cmdLineArgs" "$dirname" "$progname" "$globus_stage_file" \
	    < $globus_machine_file >> $globusrun_rsl_file
	cnt="$global_count"

# Sebastien: commented out useless code
#       if [ $cnt -ge $np ] ; then
#           break
#       fi

    done
fi

#
# Run globusrun with the rsl file
#
rc=0
if [ "$globus_dump_rsl" = "1" ] ; then
    cat $globusrun_rsl_file
else
    if [ -x "${GLOBUSBINDIR}/globusrun" ]; then
	${GLOBUSBINDIR}/globusrun -mpirun 1 -w -f $globusrun_rsl_file
	rc=$?
    else
	echo "ERROR: mpirun could not find" ${GLOBUSBINDIR}/globusrun
	rc=1
    fi
fi

if [ -n "$globus_cleanup_files" ] ; then
    rm -f $globus_cleanup_files
fi
exit $rc
