# This makefile is used to bridge knowledge from Globus to MPICH, so that
# MPICH is built using the same compiler settings, and linking the correct
# libraries.
#
# ----------------------
# REMOVE COMMENT AFTER TESTED:
# the base_* rules might need to be changed.  If plain CFLAGS and LDFLAGS
# don't work, then figure out how to get the equivelent of the BASE_CFLAGS,
# BASE_LDFLAGS, ... that were in pre globus 2.0.
#
#
# ----------------------
#
# globus_duroc_bootstrap is the top package dependency.
# on all other packages are gotten through GPT_* macros:
# e.g. globus_duroc_runtime, globus_nexus, globus_gram_myjob, ...
#
#

include mpid/globus2/Makefile.mpich.header
#include Makefile.mpich.header

# removes duplicates...
#
MPICH_CLEANUP = awk '{ \
			    for (i=NF;i>0;--i) { \
				if (index(s," "$$i" ")==0) \
				    s =" "$$i" "s ; \
			    } ; \
			} \
			END {print s}'

#
# removes -D flags from CFLAGS (for FFLAGS)
#
MPICH_DASH_D = awk '{ \
			    for (i=1;i<=NF;++i) { \
				if (index($$i,"-D")!=1) \
				    s =s" "$$i ; \
			    } ; \
			} \
			END {print s}'

#
# Globus-required linkages: location
#
userlibpath:
	@echo -L$(GLOBUS_LOCATION)/lib

#
# Globus-required linkages: libraries
#
userlib:
	@echo $(GLOBUS_PKG_LIBS) $(GLOBUS_LIBS) | $(MPICH_CLEANUP)

#
# Are the Globus libraries built for use with a vendor implementation of MPI?
#
globus_mpi_enabled:
	@mpi=$(GLOBUS_MP); if test "X$${mpi}" = "Xmpi" ; then echo "yes"; else echo "no"; fi

#
# Are the Globus libraries multi-threaded?
#
globus_threads_enabled:
	@thr=$(GLOBUS_THREADS); if test "$${thr}" = "none" ; then echo "no"; else echo "yes"; fi

#
# Compiler, linkers, and flags
#
cc:
	@echo $(GLOBUS_CC)

cflags:
	@echo $(GLOBUS_CFLAGS) $(GLOBUS_INCLUDES) | $(MPICH_CLEANUP)

base_cflags:
	@echo $(GLOBUS_CFLAGS) $(GLOBUS_INCLUDES) | $(MPICH_CLEANUP)

clinker:
	@echo $(GLOBUS_LD)

clinkerflags:
	@echo $(GLOBUS_LDFLAGS) | $(MPICH_CLEANUP)

base_clinkerflags:
	@echo $(GLOBUS_LDFLAGS) $(GLOBUS_LIBS) | $(MPICH_CLEANUP)

CC:
	@echo $(GLOBUS_CXX)

CCflags:
	@echo $(GLOBUS_CXXFLAGS) $(GLOBUS_CFLAGS) $(GLOBUS_INCLUDES) | $(MPICH_CLEANUP)

base_CCflags:
	@echo $(GLOBUS_CXXFLAGS) | $(MPICH_CLEANUP)

CClinker:
	@echo $(GLOBUS_CXX)

CClinkerflags:
	@echo $(GLOBUS_LDFLAGS) | $(MPICH_CLEANUP)

base_CClinkerflags:
	@echo $(GLOBUS_LDFLAGS) | $(MPICH_CLEANUP)

f77:
	@echo $(GLOBUS_F77)

f77flags:
	@echo $(GLOBUS_F77FLAGS) $(GLOBUS_CFLAGS) $(GLOBUS_INCLUDES) | $(MPICH_CLEANUP) | $(MPICH_DASH_D)

base_f77flags:
	@echo $(GLOBUS_F77FLAGS) | $(MPICH_CLEANUP) | $(MPICH_DASH_D)

f77linker:
	@echo $(GLOBUS_F77)

f77linkerflags:
	@echo $(GLOBUS_LDFLAGS) | $(MPICH_CLEANUP) | $(MPICH_DASH_D)

base_f77linkerflags:
	@echo $(GLOBUS_LDFLAGS) | $(MPICH_CLEANUP)

f90:
	@echo $(GLOBUS_F90)

f90flags:
	@echo $(GLOBUS_F90FLAGS) $(GLOBUS_CFLAGS) $(GLOBUS_INCLUDES) | $(MPICH_CLEANUP) | $(MPICH_DASH_D)

base_f90flags:
	@echo $(GLOBUS_F90FLAGS) | $(MPICH_CLEANUP) | $(MPICH_DASH_D)

f90linker:
	@echo $(GLOBUS_F90)

f90linkerflags:
	@echo $(GLOBUS_LDFLAGS) | $(MPICH_CLEANUP) | $(MPICH_DASH_D)

base_f90linkerflags:
	@echo $(GLOBUS_LDFLAGS) | $(MPICH_CLEANUP)
