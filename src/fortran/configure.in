AC_INIT(Makefile.in)
dnl
AC_PREREQ(2.13) dnl needed for SHELL, added in 2.13
rm -f ${srcdir}/mpi_fortconf.h mpi_fortconf.h
AC_CONFIG_HEADER(mpi_fortconf.h)
dnl We need install.sh, config.guess, etc. for the code that
dnl finds the Fortran libraries
AC_CONFIG_AUX_DIR(config)
dnl PAC_PROVIDE_IGNORE
define([AM_IGNORE],)
dnl
dnl Allow device to supply a mpid_fortdefs.h header file
dnl
dnl To enable this feature, the device setup script must set the environment
dnl variable HAVE_MPID_FORTDEFS_H and copy mpid_fortdefs.h to mpich/include
dnl and mpich/src/fortran/include.  The device is also responsible for
dnl installing the header file.
dnl
if test -z "$HAVE_MPID_FORTDEFS_H" ; then
    HAVE_MPID_FORTDEFS_H=0
fi
AC_SUBST(HAVE_MPID_FORTDEFS_H)

PAC_ARG_CACHING

AC_SUBST(COPTIONS)
AC_ARG_ENABLE(strict,
[--enable-strict  - Turn on strict compilation testing when using gcc],
COPTIONS="${COPTIONS} -Wall -O -Wstrict-prototypes -Wmissing-prototypes -DGCC_WALL")

AC_ARG_ENABLE(echo,
[--enable-echo    - Turn on echoing from within the configure script],
set -x)

AC_ARG_ENABLE(weak-symbols,
[--enable-weak-symbols - Use weak symbols to provide the profiling interface
    (default)],
enable_weak=$enableval,enable_weak="yes")

AC_ARG_ENABLE(f90,
[--enable-f90 - Find and use a Fortran 90 compiler (default:enable)],
enable_f90=$enableval,enable_f90="yes")

AC_ARG_ENABLE(f90modules,
[--enable-f90modules - Build an MPI module for use with Fortran 90],
do_f90_modules=$enableval,do_f90_modules="yes")

AC_ARG_ENABLE(use-pointer,
[--enable-use-pointer - Use the common pointer extension for MPI_BOTTOM and
    related special values],
    use_pointer_in_f77=$enableval,use_pointer_in_f77="no")
dnl Change the default to yes soon

dnl
dnl The default is the usual MPICH library
dnl We store the value in FLIBNAMEOverride so that we can include
dnl mpichlib.conf and then override the FLIBNAME value in that file
AC_ARG_WITH(flibname,
[--with-flibname=name  - Specify name of library containing Fortran interface
routines],[FLIBNAMEOverride=$withval;set_FLIBNAME="yes"],FLIBNAME=mpich)
AC_SUBST(FLIBNAME)

dnl
dnl The default is a special wrapper library
AC_ARG_WITH(fwrapname,
[--with-fwrapname=name  - Specify name of library containing Fortran interface
routines],[FWRAPNAME=$withval;set_FWRAPNAME="yes"],FWRAPNAME=fmpich)
AC_SUBST(FWRAPNAME)

AC_ARG_WITH(mpe,
[--with-mpe - MPI includes the MPE libraries],hasMPE=$withval,hasMPE="unknown")
AC_SUBST(hasMPE)

AC_ARG_WITH(cross,
[--with-cross=file - Use the file for cross compilation.  The file should 
             contain assignments of the form
             CROSS_SIZEOF_INT=4
             for each cross compilation variable.  The command
                egrep 'CROSS_[A-Z_]*=' configure | sed 's/=.*//g'
             will list each variable],
cross_file=$withval,cross_file=/dev/null)

AC_ARG_WITH(mpichconfig,
[--with-mpichconfig=file - Use file for the MPICH configuration.
              Normally, this file is mpichlib.conf, but other files
              may be used.],
[if test -z "$withval" -o "X$withval" = "Xyes" ; then 
    mpichconfig_file=../../util/mpichlib.conf
else 
    mpichconfig_file=$withval
fi
],mpichconfig_file="")

AC_ARG_WITH(subname,
[--with-subname=name - Use this name for forming the names of the 
              directories to install the mpif.h include file and 
              libraries, as well as the mpif77-name.conf file.  This
              should be used to support multiple Fortran compilers with
              a single MPICH build.  It must be used in conjunction with
              --with-mpichconfig],
subname=$withval,subname="")


# Propagate any optimization flags
AC_SUBST(OPTFLAGS)
AC_SUBST(OPTFLAGSF)

PAC_ARG_MPICH_BUILDING

if test -n "$subname" -a -z "$mpichconfig_file" ; then
    AC_MSG_ERROR([Must specify --with-mpichconfig with --with-subname])
fi

# Read any cross-compilation variable values
if test "$cross_file" != "/dev/null" -a -s "$cross_file" ; then
    . $cross_file
fi

if test -n "$mpichconfig_file" -a -s "$mpichconfig_file" ; then
    . $mpichconfig_file
    pac_lib_mpi_is_building="yes"
fi

#
# Handle the FLIBNAMEOverride after the argument processing and loading
# of the mpichconfig file
if test "$set_FLIBNAME" = "yes" ; then 
   FLIBNAME=$FLIBNAMEOverride
fi

#
# Set size of MPI_Status
#
if test -z "$MPI_STATUS_SIZE" ; then
    AC_MSG_WARN([MPI_STATUS_SIZE was not defined!])
    # The default size is 4
    MPI_STATUS_SIZE=4
fi
AC_SUBST(MPI_STATUS_SIZE)

#
# Define the installation directory names (defaults)
if test -n "$subname" ; then
    # add the leading hyphen
    subname="-$subname"
    f77includedir='${includedir}'"/${subname}"
    f77libdir='${libdir}'
    f77bindir='${bindir}'
    if test "$set_FLIBNAME" != "yes" ; then
	FLIBNAME="mpich$subname"
    fi
    if test "$set_FWRAPNAME" != "yes" ; then
	FWRAPNAME="fmpich$subname"
    fi
else
    subname="-`echo $F77 | sed 's/ /-/g'`"
    # Don't include the (sub)name in the defaults
    f77includedir='${includedir}'
    f77libdir='${libdir}'
    f77bindir='${bindir}'
fi
AC_SUBST(f77includedir)
AC_SUBST(f77libdir)
AC_SUBST(f77bindir)
AC_SUBST(subname)
# To make this compatible with the MPICH configure, the library
# directory can be set with libbuild_dir; if not set, it is built in the
# src directory
if test -z "$libbuild_dir" ; then
    libbuild_dir=`pwd`/src
fi
AC_SUBST(libbuild_dir)

AC_SUBST(FORTRAN_INITOBJ)
AC_SUBST(INCLUDES)
if test "$pac_lib_mpi_is_building" = "yes" ; then 
    AC_DEFINE(BUILDING_IN_MPICH)
    FORTRAN_INITOBJ="initfutil.o"
    # We should replace mpicc with the values used in the MPICH build.
    # This is best done with an environment variable (? what about 
    # config.status re-execution?)
    INCLUDES="$mpich_includes"
    if test "$hasMPE" = "unknown" ; then
	hasMPE="yes"
    fi
    AC_SUBST(MPIVERSION)
fi
# Directory for building the library in (in src if not specified)
if test -z "$libbuild_dir" ; then
    libbuild_dir=`pwd`/src
    if test ! -d $libbuild_dir ; then mkdir $libbuild_dir ; fi
fi
AC_SUBST(libbuild_dir)

PAC_PROG_CC
AC_SUBST(CFLAGS)
AC_C_CONST
AC_TRY_COMPILE(,[long long i;],AC_DEFINE(HAVE_LONG_LONG,1,[Define if C compiler supports long long type]))
AC_TRY_COMPILE(,[long double d;],AC_DEFINE(HAVE_LONG_DOUBLE,1,[Define if C compiler supports long double type]))
dnl
dnl Autoconf bug: AC_PROG_F77 sets FFLAGS 
save_FFLAGS="$FFLAGS"
AC_PROG_F77
FFLAGS="$save_FFLAGS"
AC_SUBST(FOPTIONS)
if test -z "$FLINKER" ; then
   FLINKER="$F77"
fi
AC_SUBST(FLINKER)
# We need F90 to get the OFFSET_KIND and ADDRESS_KIND values.
if test "$enable_f90" != "no" ; then
    PAC_PROG_F90
    if test -z "$F90" ; then
        enable_f90=no
    else
        if test -z "$F90LINKER" ; then
            F90LINKER="$F90"
        fi
    fi
    AC_SUBST(F90LINKER)
fi
PAC_ARG_MPI_TYPES

dnl
dnl Checks for programs
PAC_PROG_MAKE
# archive program
# In some cases, the AR definition in the MPICH configure is exported.
# Define our own AR here, just in case
if test -n "$ARCMD" ; then
    AR="$ARCMD"
else
    AR=ar
fi
AC_SUBST(AR)
# We need ranlib as well
if test -z "$RANLIB" ; then
    AC_PROG_RANLIB
fi

# allow for a different linker for Fortran programs
AC_SUBST(F77LINKER)
if test -z "$F77LINKER" ; then
    F77LINKER="$F77"
fi

if test "$pac_lib_mpi_is_building" = "yes" ; then
    AC_DEFINE(HAVE_MPI_F2C)
else
    PAC_MPI_F2C

    # Check for mpi.h
    AC_CHECK_HEADER(mpi.h,,
    AC_MSG_ERROR([mpi.h is required])
    )
fi

#
# The following variables are used in mpif77.in and reflect the MPI
# implementation that is in use.
# 
if test "$pac_lib_mpi_is_building" = "yes" ; then
    # These values are EXPORTED by the MPICH configure
    # Alternately, if we are building a *new* Fortran library for a
    # pre-existing MPICH build, we need to get these variables from
    # the MPICH library configuration file.
    AC_SUBST(MPILIBNAME)
    AC_SUBST(LIB_PATH)
    AC_SUBST(BASE_LIB_LIST)
    AC_SUBST(HASMPE)
    F77_LDFLAGS="$ROMIO_LFLAGS"
    AC_SUBST(F77_LDFLAGS)
    BASE_FFLAGS="$ROMIO_TFFLAGS"
    AC_SUBST(BASE_FFLAGS)
    AC_SUBST(includebuild_dir)
    AC_SUBST(MPI_WITH_PMPI)
    # Shared library support (replace with libtool?)
    AC_SUBST(SHAREDKIND)
    AC_SUBST(SHARED_LIB_SEARCH_PATH_LEADER)
    AC_SUBST(SHARED_LIB_LOCALDIR)
    AC_SUBST(sharedlibbuild_dir)
    AC_SUBST(sharedlib_dir)
    MPI2_OBJECTS='${MPI2_OBJECTS}'
    AC_SUBST(MPI2_OBJECTS)
fi
if test "$DEBUG_DUMP" = "yes" ; then
    rm -f config.env
    echo "Environment before push" >>config.env
    set >>config.env
    echo "End of env" >> config.env
fi
PAC_LANG_PUSH_COMPILERS
if test "$DEBUG_DUMP" = "yes" ; then
    echo "Environment after push" >>config.env
    set >>config.env
    echo "End of env" >> config.env
fi
dnl
dnl Why is this here?  Please explain why -lg2c must be excluded when
dnl using the NAG compilers.  
dnl The reason is that when it is included, codes fail in exit.  The
dnl problem was tracked down to the fact that the nag fortran routines
dnl do not initialize the argument values in the way that g2c expects.
dnl So, g2c is discovered, but it won't work.
dnl
if test "$f90nag" = "1" -o "$f95nag" = "1" ; then
    NOG2C=yes
else
    NOG2C=no
fi
dnl
dnl Eventually, we'd like to change this to check to see if we can use
dnl "hidden" variables to access the command line from C or Fortran,
dnl rather than using the Fortran native getarg/iargc.
dnl
if test "$pac_lib_mpi_is_building" = "yes" ; then
    dnl This must occur before the test for name mangling
    PAC_PROG_F77_CMDARGS
    if test -z "$pac_cv_F77_IARGC" ; then 
        AC_MSG_ERROR([Command line access is required for MPICH])
    fi
    dnl We also need to check that Fortran 90 is compatible with this
    dnl selection.  If not, turn off Fortran 90
    dnl
    if test "$F90" = "$F77" ; then 
        # We don't need to do anything
	pac_cv_prog_f90_cmdarg_fflags="$pac_cv_prog_f77_cmdarg_fflags"
	pac_cv_prog_f90_cmdarg_ldflags="$pac_cv_prog_f77_cmdarg_ldflags"
        F90_GETARG_FFLAGS="$pac_cv_prog_f90_cmdarg_fflags"
        F90_GETARG_LDFLAGS="$pac_cv_prog_f90_cmdarg_ldflags"
    elif test -n "$F90" -a "$enable_f90" != "no" ; then
        AC_MSG_CHECKING([how to compile and link Fortran 90 programs with Fortran 77 programs that access the command line])
        AC_CACHE_VAL(pac_cv_prog_f90_cmdarg,[
	AC_MSG_RESULT([searching...])
	dnl Create a test program
	cat >conftest.f <<EOF
       program main
       character*20 s
       integer       i, icnt
       $F77_GETARG
       icnt = $F77_IARGC
       end              
EOF
	MSG="$pac_cv_prog_f77_cmdarg"
        trial_LIBS="0 -lU77 -lPEPCF90"
        if test "$NOG2C" != "1" ; then
            trial_LIBS="$trial_LIBS -lg2c"
        fi
	trial_FLAGS="0 -YEXT_NAMES=UCS -YEXT_NAMES=LCS -YCFRL=1 +U77"
        for libs in $trial_LIBS ; do
            if test -n "$pac_cv_prog_f90_cmdarg" ; then break ; fi
	    if test "$libs" = "0" ; then libs="" ; fi
            for flags in $trial_FLAGS ; do
		if test "$flags" = "0" ; then flags="" ; fi
		if test -z "$MSG" ; then
  	  	    AC_MSG_CHECKING([if $F90 $flags $libs works])
		else
  	  	    AC_MSG_CHECKING([if $F90 $flags $libs works with $MSG])
                fi
	        ac_f90compilelink_test="${F90-f90} -o conftest $F90FLAGS $flags conftest.f $libs $LIBS 1>&AC_FD_CC"
		if AC_TRY_EVAL(ac_f90compilelink_test) && test -x conftest ; then
		    AC_MSG_RESULT([yes])
		    pac_cv_prog_f90_cmdarg="$flags $libs"
		    pac_cv_prog_f90_cmdarg_flags="$flags"
		    pac_cv_prog_f90_cmdarg_ldflags="$libs"
		    break
	        else
		    AC_MSG_RESULT([no])
		    echo "configure: failed program was:" >&AC_FD_CC
                    cat conftest.f >&AC_FD_CC
	        fi
	    done
	done
	rm -f conftest*
])
	AC_MSG_RESULT([$pac_cv_prog_f90_cmdarg])
        F90_GETARG_FFLAGS="$pac_cv_prog_f90_cmdarg_fflags"
        F90_GETARG_LDFLAGS="$pac_cv_prog_f90_cmdarg_ldflags"
        AC_SUBST(F90_GETARG_FFLAGS)
        AC_SUBST(F90_GETARG_LDFLAGS)
    fi
    # We need to add F77_GETARG_FFLAGS to FFLAGS or to F77 (they may
    # change the compiler, for example, by changing the way external
    # names are generated)
    F77="$F77 $F77_GETARG_FFLAGS"
    # We need to update the saved Fortran name
    pac_save_F77="$pac_save_F77 $F77_GETARG_FFLAGS"
fi
dnl
dnl This option requires the config.guess etc.
FLIBS_save="$FLIBS"
FLIBS=""
AC_F77_LIBRARY_LDFLAGS
PAC_PROG_F77_CHECK_FLIBS
dnl
PAC_PROG_F77_LINKER_WITH_C
dnl For name mangle, we need the library flags
PAC_PROG_F77_NAME_MANGLE
dnl Once we have name mangle, we can try to limit the number of needed libs
PAC_PROG_F77_IN_C_LIBS
AC_SUBST(F77_IN_C_LIBS)
AC_LANG_FORTRAN77
PAC_PROG_F77_EXCLAIM_COMMENTS(has_exclaim="yes",has_exclaim="no")
PAC_PROG_F77_NEW_CHAR_DECL(CHARDECL="(LEN=*)",CHARDECL="*(*)")
AC_SUBST(CHARDECL)
dnl PAC_F77_CHECK_COMPILER_OPTION(-g)
PAC_PROG_F77_HAS_INCDIR(include)
if test -n "$F77_INCDIR" ; then
    # For building the Fortran files, add the directory where we are building 
    # the object to the include list.  This is needed for g77, which makes
    # includes relative to the source directory of the file, not the 
    # directory that the command is executed in
    FINCLUDES="$F77_INCDIR`pwd`/src"
fi
AC_SUBST(FINCLUDES)
#
PAC_PROG_F77_LIBRARY_DIR_FLAG

AC_SUBST(MPIFPMPI)
if test "$MPI_WITH_PMPI" = "no" ; then
    # If the PMPI routines are not in the same library with the MPI
    # routines, we may need to remove the pmpi declarations
    PAC_PROG_F77_ALLOWS_UNUSED_EXTERNALS([MPIFPMPI=",PMPI_WTIME,PMPI_WTICK"],[
    MPIFPMPI=""; 
    AC_MSG_WARN([Removed PMPI_WTIME and PMPI_WTICK from mpif.h])])
else
    MPIFPMPI=",PMPI_WTIME,PMPI_WTICK"
fi
dnl If Fortran has a pointer extension, we can create a null pointer 
dnl instead of using the hack of checking for a specific address.
PAC_PROG_F77_HAS_POINTER(f77_has_pointer=yes,f77_has_pointer=no)
rm -f include/mpif_bottom.h
if test "$f77_has_pointer" = "yes" -a "$use_pointer_in_f77" = "yes" ; then
    cat >>include/mpif_bottom.h <<EOF
        pointer (MPI_BOTTOM_PTR,MPI_BOTTOM)
	pointer (MPI_STATUS_IG_PTR,MPI_STATUS_IGNORE)
	pointer (MPI_STATUSES_IG_PTR,MPI_STATUSES_IGNORE)
        data MPI_BOTTOM_PTR/0/, MPI_STATUS_IG_PTR/0/
	data MPI_STATUSES_IG_PTR/0/
EOF
    AC_DEFINE(USE_POINTER_FOR_BOTTOM)
    dnl Note that with this, we do not need the call to mpir_init_fcm
    dnl in initfcmn.f .
else
    cat >>include/mpif_bottom.h <<EOF
      COMMON /MPIPRIV/ MPI_BOTTOM,MPI_STATUS_IGNORE,MPI_STATUSES_IGNORE
C
C     Without this save, some Fortran implementations may make the common
C     dynamic!
C    
C     For a Fortran90 module, we might replace /MPIPRIV/ with a simple
C     SAVE MPI_BOTTOM
C
      SAVE /MPIPRIV/
EOF
fi

dnl Up to size checking code in master configure.in (where it tries to 
dnl find the matching C sizes) as part of defining mpi_integer8 etc.
dnl The results are available in pac_cv_sizeof_f77_<type>
dnl Size is 0 if unknown or unavailable (or cross-compiling)
dnl Due to limitations in autoconf, we can't put these into a loop.
dnl We also check integer to find the type of MPI_Fint
dnl
dnl Cross-compilation results can be included with the --with-cross=file
dnl option.
CROSS_F77_SIZEOF_INTEGER=${CROSS_F77_SIZEOF_INTEGER:-0}
CROSS_F77_SIZEOF_REAL=${CROSS_F77_SIZEOF_REAL:-0}
CROSS_F77_SIZEOF_DOUBLE_PRECISION=${CROSS_F77_SIZEOF_PRECISION:-0}
PAC_PROG_F77_CHECK_SIZEOF(integer,$CROSS_F77_SIZEOF_INTEGER)
PAC_PROG_F77_CHECK_SIZEOF(real,$CROSS_F77_SIZEOF_REAL)
PAC_PROG_F77_CHECK_SIZEOF(double precision,$CROSS_F77_SIZEOF_DOUBLE_PRECISION)
# If we have sizes for real and double, we do not need to call mpir_get_fsize
# at run time.
#
AC_TRY_COMPILE(,[      integer*1 i],has_integer_1=1,has_integer_1=0)
AC_TRY_COMPILE(,[      integer*2 i],has_integer_2=2,has_integer_2=0)
AC_TRY_COMPILE(,[      integer*4 i],has_integer_4=4,has_integer_4=0)
AC_TRY_COMPILE(,[      integer*8 i],has_integer_8=8,has_integer_8=0)
AC_TRY_COMPILE(,[      integer*16 i],has_integer_16=16,has_integer_16=0)
dnl PAC_PROG_F77_CHECK_SIZEOF(integer*1,0)
dnl PAC_PROG_F77_CHECK_SIZEOF(integer*2,0)
dnl PAC_PROG_F77_CHECK_SIZEOF(integer*4,0)
dnl PAC_PROG_F77_CHECK_SIZEOF(integer*8,0)
dnl PAC_PROG_F77_CHECK_SIZEOF(integer*16,0)

dnl PAC_PROG_F77_CHECK_SIZEOF(real*4,0)
dnl PAC_PROG_F77_CHECK_SIZEOF(real*8,0)
dnl PAC_PROG_F77_CHECK_SIZEOF(real*16,0)
AC_TRY_COMPILE(,[      real*4 a],has_real_4=4,has_real_4=0)
AC_TRY_COMPILE(,[      real*8 a],has_real_8=8,has_real_8=0)
AC_TRY_COMPILE(,[      real*16 a],has_real_16=16,has_real_16=0)


# Compare the sizes of these types to the C types

AC_LANG_C

AC_HEADER_STDC
AC_CHECK_HEADERS(stdlib.h string.h)
# Current bug: this is needed for mpi.h, which should eventually remove
#   the ifdef test on USE_STDARG 
# It is also used in the definition of MPIR_Err_setmsg.
PAC_HEADER_STDARG([AC_DEFINE(USE_STDARG)],[AC_DEFINE(USE_OLDSTYLE_STDARG)])

# Get defaults for cross compilation case
CROSS_SIZEOF_CHAR=${CROSS_SIZEOF_CHAR:-0}
CROSS_SIZEOF_SHORT=${CROSS_SIZEOF_SHORT:-0}
CROSS_SIZEOF_INT=${CROSS_SIZEOF_INT:-0}
CROSS_SIZEOF_LONG=${CROSS_SIZEOF_LONG:-0}
CROSS_SIZEOF_LONG_LONG=${CROSS_SIZEOF_LONG_LONG:-0}
CROSS_SIZEOF_FLOAT=${CROSS_SIZEOF_FLOAT:-0}
CROSS_SIZEOF_DOUBLE=${CROSS_SIZEOF_DOUBLE:-0}
CROSS_SIZEOF_LONG_DOUBLE=${CROSS_SIZEOF_LONG_DOUBLE:-0}
CROSS_SIZEOF_VOID_P=${CROSS_SIZEOF_VOID_P:-0}
CROSS_OFFSET_KIND=${CROSS_OFFSET_KIND:-0}
CROSS_ADDRESS_KIND=${CROSS_ADDRESS_KIND:-0}

AC_CHECK_SIZEOF(char,$CROSS_SIZEOF_CHAR)
AC_CHECK_SIZEOF(short,$CROSS_SIZEOF_SHORT)
AC_CHECK_SIZEOF(int,$CROSS_SIZEOF_INT)
AC_CHECK_SIZEOF(long,$CROSS_SIZEOF_LONG)
AC_CHECK_SIZEOF(long long,$CROSS_SIZEOF_LONG_LONG)
AC_CHECK_SIZEOF(float,$CROSS_SIZEOF_FLOAT)
AC_CHECK_SIZEOF(double,$CROSS_SIZEOF_DOUBLE)
AC_CHECK_SIZEOF(long double,$CROSS_SIZEOF_LONG_DOUBLE)
# sizeof(void*) is needed for ADDRESS_KIND below
AC_CHECK_SIZEOF(void*,$CROSS_SIZEOF_VOID_P)

#
# Preload the C mpi types
# THESE MUST MATCH THE DEFINITIONS IN MPI.H and MPIF.H
char_mpi=1
short_mpi=4
int_mpi=6
long_mpi=8
long_long_mpi=13
float_mpi=10
double_mpi=11
long_double_mpi=12
# Warning: float_cplx is Fortran COMPLEX, not (float,float)
float_cplx_mpi=23
# Warning: double_cplx is Fortran DOUBLE COMPLEX, not (double,double)
double_cplx_mpi=24
long_double_cplx_mpi=0

for len in 1 2 4 8 16 ; do
    eval F77_INT$len=0
    #eval testval=\$"pac_cv_f77_sizeof_integer_$len"
    eval testval=\$"has_integer_$len"
    if test "$testval" = 0 ; then continue ; fi
    noval="yes"
    AC_MSG_CHECKING([for C type matching Fortran integer*$len])
    for c_type in char short int long "long_long" ; do
	eval ctypelen=\$"ac_cv_sizeof_$c_type"
	if test "$testval" = "$ctypelen" -a "$ctypelen" -gt 0 ; then
	    AC_MSG_RESULT($c_type)
	    eval F77_INT$len=\$"${c_type}_mpi"
	    noval="no"
	    break
        fi
    done
    if test "$noval" = "yes" ; then
        AC_MSG_RESULT([unavailable])
    fi
done

for len in 4 8 16 ; do
    len2=`expr $len + $len`
    eval F77_REAL$len=0
    eval F77_COMPLEX$len2=0
    #eval testval=\$"pac_cv_f77_sizeof_real_$len"
    eval testval=\$"has_real_$len"
    if test "$testval" = 0 ; then continue ; fi
    noval="yes"
    AC_MSG_CHECKING([for C type matching Fortran real*$len])
    for c_type in float double "long_double" ; do
	eval ctypelen=\$"ac_cv_sizeof_$c_type"
	if test "$testval" = "$ctypelen" -a "$ctypelen" -gt 0 ; then
	    AC_MSG_RESULT($c_type)
	    eval F77_REAL$len=\$"${c_type}_mpi"
	    eval F77_COMPLEX$len2=\$"${c_type}_cplx_mpi"
            noval="no"
	    break
        fi
    done
    if test "$noval" = "yes" ; then
        AC_MSG_RESULT([unavailable])
    fi
done
AC_SUBST(F77_INT1)
AC_SUBST(F77_INT2)
AC_SUBST(F77_INT4)
AC_SUBST(F77_INT8)
AC_SUBST(F77_INT16)
AC_SUBST(F77_REAL4)
AC_SUBST(F77_REAL8)
AC_SUBST(F77_REAL16)
AC_SUBST(F77_COMPLEX8)
AC_SUBST(F77_COMPLEX16)
AC_SUBST(F77_COMPLEX32)

noval="yes"
AC_MSG_CHECKING([for C type matching Fortran integer])
for c_type in char short int long "long_long" ; do
    eval ctypelen=\$"ac_cv_sizeof_$c_type"
    if test "$pac_cv_f77_sizeof_integer" = "$ctypelen" -a \
       "$ctypelen" -gt 0 ; then
	c_type=`echo $c_type | sed -e 's/_/ /g'`
	AC_MSG_RESULT($c_type)
	MPI_FINT_TYPE=$c_type
	noval="no"
	break
    fi
done
if test "$noval" = "yes" ; then
    # Set a default
    MPI_FINT_TYPE="int"
    AC_MSG_RESULT([unavailable])
    AC_DEFINE(FINT_TYPE_UNKNOWN,,[Define if we cannot determine the type of MPI_Fint at compile time])
fi
AC_SUBST(MPI_FINT_TYPE)
dnl
dnl Include a defined value for Fint is int
if test "$MPI_FINT_TYPE" = "int" ; then
    AC_DEFINE(FINT_IS_INT)
fi

PAC_PROG_C_UNALIGNED_DOUBLES(,
[AC_MSG_WARN(Your C compiler $CC does not support unaligned accesses
to doubles.  This is required for interoperation with 
Fortran (the Fortran standard requires it).)])

if test "$enable_weak" = "yes" ; then
    PAC_PROG_C_WEAK_SYMBOLS(AC_DEFINE(HAVE_WEAK_SYMBOLS))
fi

#
# Try to get values for Fortran logical variables.
if test "$cross_compiling" = "no" ; then
    AC_MSG_CHECKING([for values of Fortran logicals])
    AC_CACHE_VAL(pac_cv_prog_f77_true_false_value,[
    PAC_PROG_F77_RUN_PROC_FROM_C([
#include <stdio.h>
int main()
{
    $MPI_FINT_TYPE itrue, ifalse;
    FILE *f = fopen("conftestval", "w" );
    if (!f) exit(1);
    ftest_( &itrue, &ifalse );
    fprintf( f, "%d %d\n", itrue, ifalse );
    exit(0);
}
],[
        subroutine ftest( itrue, ifalse )
        logical itrue, ifalse
        itrue  = .TRUE.
        ifalse = .FALSE.
        return
        end
],[
    pac_cv_prog_f77_true_false_value=`cat conftestval`
],,:)])
    true_val="`echo $pac_cv_prog_f77_true_false_value | sed -e 's/ .*//g'`"
    false_val="`echo $pac_cv_prog_f77_true_false_value | sed -e 's/.*  *//g'`"
    if test -n "$true_val" -a -n "$false_val" ; then
        AC_DEFINE(F77_TRUE_VALUE_SET)
        AC_DEFINE_UNQUOTED(F77_TRUE_VALUE,$true_val)
        AC_DEFINE_UNQUOTED(F77_FALSE_VALUE,$false_val)
	AC_MSG_RESULT([True is $true_val and False is $false_val])
    else
	AC_MSG_RESULT([could not determine])
    fi
fi

PAC_LANG_POP_COMPILERS

if test "$pac_lib_mpi_is_building" = "yes" ; then
    AC_LANG_C
    FARGOBJ="farg.o"
    AC_DEFINE(HAS_MPIR_ERR_SETMSG)
else
    # Test for mpir_iargc; if not found, add farg.f.in
    AC_MSG_CHECKING([for mpir_iargc provided for command line in Fortran])
    AC_LANG_FORTRAN77
    AC_TRY_LINK(,[mpir_iargc()],found="yes",found="no")
    if test "$found" = "no" ; then
        AC_MSG_RESULT(no)
        PAC_LANG_PUSH_COMPILERS
        PAC_PROG_F77_CMDARGS
        PAC_LANG_POP_COMPILERS
        FARGOBJ="farg.o"
    else
        AC_MSG_RESULT(yes)
        FARGOBJ=""
    fi
    # Test for MPICH error handling routine
    AC_LANG_C
    AC_CHECK_FUNC(MPIR_Err_setmsg)
fi
AC_SUBST(FARGOBJ)

# If the system is Cray or Cray-like, then we need to handle character
# data in a special way.  This code does that.
if test "$target_os" = "CRAY" ; then
    # If tested code does NOT compile, then define _TWO_WORD_FCD
    AC_MSG_CHECKING([whether TWO_WORD_FCDs are used])
    AC_TRY_COMPILE([#include <fortran.h>],
[void  *buf;_fcd temp;temp = _fcdtocp(buf);],
compile_check=yes,compile_check=no)
    AC_MSG_RESULT($compile_check)
    if test "$compile_check" = "no" ; then
        TEMP_CFLAGS=$CFLAGS
        CFLAGS="-D_TWO_WORD_FCD $CFLAGS"
        AC_MSG_CHECKING([whether program compiles if _TWO_WORD_FCD is defined ])
        AC_TRY_COMPILE([#include <fortran.h>],
[void  *buf;_fcd temp;temp = _fcdtocp(buf);],
compile_check=yes,compile_check=no)
        AC_MSG_RESULT($compile_check)
        if test "$compile_check" = "no" ; then
	    AC_MSG_WARN([You may have problems compiling the Fortran interface
specifically calls to  _fcdtocp])
        elif test "$compile_check" = "yes" ; then
            AC_DEFINE(_TWO_WORD_FCD)
        fi
        CFLAGS=$TEMP_CFLAGS
    fi
fi

if test -n "$arch_UXPM" -o -n "$arch_uxpv" ; then
    # This asserts that Fortran passes functions by passing the address of the
    # pointer to the function.
    # We really need a TEST for this
    AC_DEFINE(FORTRAN_SPECIAL_FUNCTION_PTR)
    # Suggested values for these are
    dnl CFLAGS=-O
    dnl    #FFLAGS=-Oe,-U -Aabe ( Parameter e is not supported on  uxp/m )
    dnl FLINKER=frt
    dnl FLIBS="$FLIB_PATH $LIB_LIST"
fi

#
# For Fortran 90, we'll also need MPI_ADDRESS_KIND and MPI_OFFSET_KIND
# Since our compiler might BE a Fortran 90 compiler, try and determine the
# values.  
F90="${F90-$F77}"
PAC_LANG_PUSH_COMPILERS
PAC_LANG_FORTRAN90
# Offset kind should be for 8 bytes if possible (Romio prefers that)
# address should be sizeof void *
testsize=$ac_cv_sizeof_voidp
if test "$testsize" = 0 ; then
    # Set a default
    testsize=4
fi
dnl Using the {} around testsize helps the comments work correctly
PAC_PROG_F90_INT_KIND(ADDRESS_KIND,${testsize},$CROSS_ADDRESS_KIND)
if test "$ac_cv_sizeof_void_p" = 8 ; then
    OFFSET_KIND=$ADDRESS_KIND
else
    PAC_PROG_F90_INT_KIND(OFFSET_KIND,8,$CROSS_OFFSET_KIND)
fi
#
# Some compilers won't allow a -1 kind (e.g., absoft), others won't 
# allow a 0 (Intel?).  In this case, use a fallback (sizeof(int) kind),
# which is correct for many but not all Fortran 90 compilers (the NAG
# F90 compiler uses consequetive integers, i.e., 1,2,3)
if test "$ADDRESS_KIND" = "-1" -o "$OFFSET_KIND" = "-1" -o \
        "$ADDRESS_KIND" = "0" -o "$OFFSET_KIND" = "0" ; then
    PAC_PROG_F90_INT_KIND(simpleintkind,${pac_cv_f77_sizeof_integer})
    if test "$simpleintkind" = "-1" ; then
	# Wild guess; probably means that Fortran 90 is not available
	simpleintkind=4
	AC_MSG_WARN([Unable to determine the size of a simple integer])
    fi
    if test "$ADDRESS_KIND" = "-1" -o "$ADDRESS_KIND" = "0" ; then
        AC_MSG_WARN([Using $simpleintkind for the Fortran 90 KIND of an MPI_Aint])
	ADDRESS_KIND=$simpleintkind
    fi
    if test "$OFFSET_KIND" = "-1" -o "$OFFSET_KIND" = "0" ; then
        AC_MSG_WARN([Using $simpleintkind for the Fortran 90 KIND of an MPI_Offset])
	OFFSET_KIND=$simpleintkind
    fi
fi
PAC_LANG_POP_COMPILERS

AC_SUBST(ADDRESS_KIND)
AC_SUBST(OFFSET_KIND)

dnl Check for other Fortran 90 features, such as different include/use
dnl module directory and special flags.  Build modules if requested
if test -n "$F90" -a "$enable_f90" != "no" ; then
    F90_SUFFIX="$ac_f90ext"
    # For now, top_srcdir_val is MPIR_HOME; 
    # The build dir is relative at ../..
    top_srcdir_val="$MPIR_HOME"
    if test "$do_f90_modules" = "yes" -a -n "$top_srcdir_val" ; then
        echo "Setting up F90 Module support"
	if test ! -d ../../f90modules ; then mkdir ../../f90modules ; fi
	# if we're the developers, we may need to create the
	# initial configure files.
	if test ! -x $top_srcdir_val/f90modules/configure -a \
	          -s $top_srcdir_val/f90modules/configure.in -a \
		  -x $top_srcdir_val/f90modules/makeconfigure ; then
	    (cd $top_srcdir_val/f90modules ; ./makeconfigure)
	fi
	# Should F90LINKER be F90TESTLINKER?
        (cd ../../f90modules ; \
	            export F90 ; export MPIR_HOME ; export VPATH ; \
	   	    export libbuild_dir ; export includebuild_dir ; \
		    export MAKE ; F90LINKER="$F90LINKER" ; \
		    export F90LINKER ; export F77 ; \
 	   	    $top_srcdir_val/f90modules/configure --with-mpich)
        if test ! -s ../../f90modules/Makefile ; then 
	    # turn off f90
	    F90=""
	else		    
 	    F90_MODINCFLAG="`$MAKE -f ../../f90modules/Makefile f90modflag`"
  	    F90MODINCSPEC="`$MAKE -f ../../f90modules/Makefile f90modspec`"
            if test -z "$USER_SET_F90INC" -a -z "$F90INC" ; then 
	        # This should use a test or try to get it from the f90module.
	        F90INC=`$MAKE -f ../../f90modules/Makefile f90incflag`
            fi
        fi
    fi
else 
     # Remove the f90modules/Makefile since this is the only way
     # to tell the top-level makefile not to build the f90 modules.
     # (We need a better way)
     rm -f ../../f90modules/Makefile
fi
AC_SUBST(F90_SUFFIX)
f90includedir='${includedir}'
f90libdir='${libdir}'
AC_SUBST(f90includedir)
AC_SUBST(f90libdir)
AC_SUBST(F90_LDFLAGS)
AC_SUBST(F90INC)
AC_SUBST(F90_MODINCFLAG)
AC_SUBST(F90MODINCSPEC)
AC_SUBST(F90FLAGS)
AC_SUBST(F90LINKER)
AC_SUBST(F90LIB_PATH)
if test -z "$F90_LIBDIR_LEADER" ; then 
    F90_LIBDIR_LEADER="-L"
fi
AC_SUBST(F90_LIBDIR_LEADER)

dnl
dnl If both C and Fortran are gnu, define the following to simplify 
dnl shared library support.  
AC_MSG_CHECKING([whether using gcc and g77 together])
if test "$ac_cv_prog_gcc" = "yes" -a "$ac_cv_prog_g77" = "yes" ; then
    AC_DEFINE(USE_GCC_G77_DECLS,1,[Define if using gcc and g77 together])
    AC_MSG_RESULT(yes)
else 
    AC_MSG_RESULT(no)
fi
dnl In the MPICH case, make a copy of the definitions file available to the
dnl mpi.h file.
dnl Despite the fact that this appears *before* AC_OUTPUT, these actions 
dnl happen *after* AC_OUTPUT
dnl AC_OUTPUT_COMMANDS([if test -n "$includebuild_dir" ; then \
dnl 	cp include/mpi_fortdefs.h $includebuild_dir/mpi_fortdefs.h ; fi],
dnl 	[includebuild_dir=$includebuild_dir] )
dnl AC_OUTPUT_COMMANDS([chmod a+x mpif77 ; \
dnl     if test -n "$binbuild_dir" ; then cp mpif77 $binbuild_dir/mpif77 ; fi], 
dnl         [binbuild_dir=$binbuild_dir] )
dnl
dnl First, ensure that echo works within the config.status 
AC_OUTPUT_COMMANDS([if test "$enable_echo" ; then set -x ; fi ])
dnl add ROMIO part of mpif.h if it exists
AC_OUTPUT_COMMANDS([if test -f ../../romio/include/mpiof.h -a "$ROMIO" = 1 ; then \
  sed -e '/MPI_OFFSET_KIND/d' ../../romio/include/mpiof.h | \
  cat include/mpif.h - > mpif-tmp.h ; \
  rm -f $includebuild_dir/mpif.h ; \
  mv mpif-tmp.h include/mpif.h ; fi])

dnl This must be run before converting C to !
AC_OUTPUT_COMMANDS([rm -f .tmp ; 
cat include/mpif.h include/mpif_bottom.h > .tmp ;
rm -f include/mpif.h ; mv .tmp include/mpif.h
])
dnl By modifying mpif.h to use ! for comments, it can work with many f90 
dnl compilers without creating a separate version.  
dnl Note that this is run AFTER the AC_OUTPUT actions
AC_OUTPUT_COMMANDS([if test "$has_exclaim" = "yes" ; then 
    rm -f .tmp
    cp include/mpif.h .tmp
    sed -e 's/^C/\!/g' .tmp > include/mpif.h
    rm -f .tmp
fi
],[has_exclaim=$has_exclaim])
AC_OUTPUT_COMMANDS([chmod a+x src/mpif77])
AC_OUTPUT_COMMANDS([chmod a+x src/mpif90])
AC_OUTPUT(Makefile src/Makefile src/farg.f \
	  include/mpif.h include/mpi_fortdefs.h src/mpif77 src/mpif77.conf \
	  src/mpif90 src/mpif90.conf src/initfcmn.f src/initfdte.f )
exit 0
dnl
dnl Add the following to the output step after the AC_OUTPUT

if test -n "$F90" ; then
    # Remove all comments from mpif.h
    /bin/rm -f $includebuild_dir/mpif.h.copy
    cp $includebuild_dir/mpif.h $includebuild_dir/mpif.h.copy
    if test "$fixupmpif" = "no" ; then
	# Regular Fortran doesn't have ! for comments, so we just delete them
        sed -e '/^C/d' -e 's/\!.*$//g' $includebuild_dir/mpif.h.copy > $includebuild_dir/mpif.h
    else
        sed -e 's/^C/\!/g' $includebuild_dir/mpif.h.copy > $includebuild_dir/mpif.h
    fi
    /bin/rm -f $includebuild_dir/mpif.h.copy
else
    # ROMIO might have added ! comments to mpif.h
    if test -z "$fixupmpif" -o "$fixupmpif" = "no" ; then
        /bin/rm -f $includebuild_dir/mpif.h.copy
        cp $includebuild_dir/mpif.h $includebuild_dir/mpif.h.copy
	# Regular Fortran doesn't have ! for comments, so we just delete them
        sed -e '/^C/d' -e 's/\!.*$//g' $includebuild_dir/mpif.h.copy > $includebuild_dir/mpif.h
        /bin/rm -f $includebuild_dir/mpif.h.copy
    fi
fi
