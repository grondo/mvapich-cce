#! /bin/sh
DoLink=1
DoCompile=0
show_compile=0
show_link=0
MPILOG=
Show=eval
allargs=
compileargs=
linkargs=
linkobjs=
gettinglinkarg=0
HasDashC=0
UsesPmpi=0
verbose=0
# Default compiler configuration
#
# Directory locations: Fixed for any MPI implementation
prefix=@prefix@
exec_prefix=@exec_prefix@
sysconfdir=@sysconfdir@
includedir=@includedir@
libdir=@libdir@
#
# Directory locations: Can change for each Fortran version
f77includedir=@f77includedir@
f77libdir=@f77libdir@
#
F77BASE="@F77@"
FLINKERBASE="@F77LINKER@"
LDFLAGSBASE="@LDFLAGS@"
BASE_FFLAGS="@BASE_FFLAGS@ @F77_GETARG_FFLAGS@"
FINC="@F77_INCDIR@"
USER_FFLAGS="@FFLAGS@"
#
# Linker flags
F77_LDFLAGS="@F77_LDFLAGS@"
BASE_LIB_LIST="@BASE_LIB_LIST@"
FLIB_LIST="@F77_GETARG_LDFLAGS@"
FLIB_PATH_LEADER="@F77_LIBDIR_LEADER@"
FLIB_PATH="${libdir}"
LIB_PATH="@LIB_PATH@"
MPILIBNAME="@MPILIBNAME@"
MPIVERSION="@MPIVERSION@"
FWRAPNAME="@FWRAPNAME@"
FLIBNAME="@FLIBNAME@"
# set to yes if the PMPI routines are in the same library with the MPI routines
# (for example, they are built with weak symbols).
MPI_WITH_PMPI="@MPI_WITH_PMPI@"
proflib=-lp${MPILIBNAME}
proflibfullname=${libdir}/libp${MPILIBNAME}.a
#
hasMPE="@hasMPE@"
# Shared library support
SHAREDKIND="@SHAREDKIND@"
SHARED_LIB_SEARCH_PATH_LEADER='@SHARED_LIB_SEARCH_PATH_LEADER@'
SHARED_LIB_LOCALDIR="@SHARED_LIB_LOCALDIR@"
sharedlibdir=@sharedlib_dir@
#
# Override the compilers using environment variables
F77LINKER="${MPICH_FLINKER-$FLINKERBASE}"
if [ -n "$MPICH_F77" ] ; then
    F77="$MPICH_F77"
    F77name=`echo $F77 | sed 's/ /-/g'`
    if [ -s $sysconfdir/mpif77-$F77name.conf ] ; then
        . $sysconfdir/mpif77-$F77name.conf
    fi
else
    F77="$F77BASE"
fi
UseSharedLib=${MPICH_USE_SHLIB-yes}
#
for arg in "$@" ; do
#    echo procssing arg $arg
    # Special processing for -o name
    if [ $gettinglinkarg = 1 ] ; then
	linkargs="$linkargs $arg"
	gettinglinkarg=0
	outputfilename="$arg"
	continue
    fi
    case "$arg" in 
	-c)
	# If -c is NOT specified, then we need to perform a link step.
	allargs="$allargs $arg"
	compileargs="$compileargs $arg"
        # If -o was set, then we need to move the output file option
        # to the compile line (note that this is non-standard, and should
        # not be used in portable codes)
        if [ $DoLink = 1 -a -n "$outputfilename" ] ; then
	    compileargs="$compileargs -o $outputfilename"
        fi
	DoLink=0
	HasDashC=1
	;;
        -o)
	# Need to link
	allargs="$allargs $arg"
        if [ $HasDashC = 1 ] ; then
            # Some BUT NOT ALL compilers support -o with -c.  Allow
            # the user to make use of the feature, IF IT EXISTS.
            compileargs="$compileargs $arg"	
        else
	    linkargs="$linkargs $arg"
	    compileargs="$compileargs -c"
	    # Still need to add the target of the -o
	    gettinglinkarg=1
	    DoLink=1
        fi
	;;
	-mpilog)
	if [ $UsesPmpi = 1 ] ; then
	    echo "Only one of -mpilog, -mpitrace, or -mpianim may be used."
	    exit 1
	else
	    UsesPmpi=1
        fi
	if [ "$hasMPE" = "yes" ] ; then
		MPILOG="-l${FWRAPNAME} -llmpe -lmpe"
	else
	    echo "-mpilog requires the MPE libraries"
	fi
	;;
	-mpitrace)
	if [ $UsesPmpi = 1 ] ; then
	    echo "Only one of -mpilog, -mpitrace, or -mpianim may be used."
	    exit 1
	else
	    UsesPmpi=1
        fi
	if [ "$hasMPE" = "yes" ] ; then
   	    MPILOG="-l${FWRAPNAME} -ltmpe -lmpe"
	else
	    echo "-mpitrace requires the MPE libraries"
	fi
	;;
	-mpianim)
	if [ $UsesPmpi = 1 ] ; then
	    echo "Only one of -mpilog, -mpitrace, or -mpianim may be used."
	    exit 1
	else
	    UsesPmpi=1
        fi
	if [ "$hasMPE" = "yes" ] ; then
	    MPILOG="-l${FWRAPNAME} -lampe -lmpe"
	else
	    echo "-mpianim requires the MPE libraries"
	fi
	;;
	-echo)
	set -x
	;;
	-show)
	Show=echo
	;;
	-config=*)
	FCname=`echo A$arg | sed -e 's/A-config=//g'`
        if [ -s $sysconfdir/mpif77-$FCname.conf ] ; then
	    . $sysconfdir/mpif77-$FCname.conf 
	else
	    echo "Configuration file mpif77-$FCname.conf not found"
	fi
	;;
	-fc=*)
	F77=`echo A$arg | sed -e 's/A-fc=//g'`
	F77LINKER="$F77"
	;;
	-compile_info|-compile-info)
	show_compile=1
	DoLink=0
	Show=echo
	;;
	-link_info|-link-info)
	show_link=1
	Show=echo
	;;
	-shlib)
        UseSharedLib=yes
	;;
	-noshlib)
        UseSharedLib=no
	;;
	-v)
	verbose=1
	echo "mpif77 for $MPIVERSION"
	compileargs="$compileargs -v"
	linkargs="$linkargs -v"
	;;
	-l*)
	# This SHOULD be the -l<lib> argument.  Only for the linker
	linkargs="$linkargs $arg"
	allargs="$allargs $arg"
	;;
	-help)
cat <<EOF
This is a program to compile or link MPI programs
In addition, the following special options are supported
    -mpilog    - Build version that generate MPE log files
    -mpitrace  - Build version that generates traces
    -mpianim   - Build version that generates real-time animation
    -fc=pgm    - Change the program to use to compile and link
                 MPI programs.  WARNING! The program that you
                 choose MUST be compatible with the MPICH 
                 libraries.  If you have trouble, you should
                 reconfigure and rebuild MPICH, selecting
                 this compiler.
    -show      - Show the commands that would be used without
                 runnning them
    -compile-info - Show how to compile a program
    -link-info - Show how to link a program
    -help      - Give this help
    -echo      - Show exactly what this program is doing.
                 This option should normally not be used.
This should be used just like the usual Fortran compiler
For example,
   $0 -c foo.f 
and
   $0 -o foo foo.o
Combining compilation and linking in a single command
   $0 -o foo foo.f
may not work on some systems, and is not recommended.
EOF
	exit 1
	;;
        #*\"*) 
	#allargs="$allargs `echo $arg | sed 's/\"/\\\"/g'`"
	#compileargs="$compileargs `echo $arg | sed 's/\"/\\\"/g'`"
	#linkargs="$linkargs `echo $arg | sed 's/\"/\\\"/g'`"
	#;;
	# Unrecognized args.  Because we do an eval, we need to
	# carefully quote any args that contain quotes.
        *\"*) 
	qarg="'"$arg"'"
	allargs="$allargs $qarg"
	compileargs="$compileargs $qarg"
	linkargs="$linkargs $qarg"
	;;
        *\'*) 
	qarg='\"'"$arg"'\"'
	allargs="$allargs $qarg"
	compileargs="$compileargs $qarg"
	linkargs="$linkargs $qarg"
	;;
        *) allargs="$allargs $arg"
	if [ -s "$arg" ] ; then
	    ext=`expr "$arg" : '.*\(\..*\)'`
	    if [ "$ext" = ".f" -o "$ext" = ".F" -o \
		 "$ext" = ".for" -o "$ext" = ".FOR" ] ; then
	        DoCompile=1
	        compileargs="$compileargs $arg"
	        fname=`basename $arg $ext`
	        linkobjs="$linkobjs $fname.o"
	    elif [ "$ext" = ".s" -o "$ext" = ".S" ] ; then
	        # Support .s and .S for those compilers that can
	        DoCompile=1
	        compileargs="$compileargs $arg"
	        fname=`basename $arg $ext`
	        linkobjs="$linkobjs $fname.o"
	    elif [ "$ext" = ".o" ] ; then
		if [ $HasDashC = 1 ] ; then
	            compileargs="$compileargs $arg"
                else
	            DoLink=1
	            linkobjs="$linkobjs $arg"
                fi
	    else
	        compileargs="$compileargs $arg"
	        linkargs="$linkargs $arg"
	    fi
	else
            compileargs="$compileargs $arg"
	    linkargs="$linkargs $arg"
	fi
	;;
    esac
done
#
# Take care of mpif.h; try to add the link if necessary
added_link=0
if [ -z "$FINC" ] ; then
    # -r is true if we can read the file, which is what we want
    if [ ! -r mpif.h ] ; then
        #echo "Adding a symbolic link for mpif.h"
	trap "$Show /bin/rm mpif.h" 0
	$Show ln -s $f77includedir/mpif.h mpif.h
        added_link=1
    fi
else
    FINC="$FINC$f77includedir"
fi
status=0
if [ $HasDashC = 1 -a $DoCompile = 0 -a $DoLink = 0 ] ; then
    # Specified -c but no files.  Try to force -c behavior from compiler
    DoCompile=1
fi

if [ $DoCompile = 1 -o $show_compile = 1 ] ; then 
    if [ $HasDashC != 1 ] ; then
        compileargs="-c $compileargs"
    fi
    $Show $F77 $BASE_FFLAGS $FFLAGS $USER_FFLAGS $compileargs $FINC
    status=$?
    if [ $status != 0 ] ; then 
	exit $status
    fi
fi
if [ $DoLink = 1 -o $show_link = 1 ] ; then
    # If no LDFLAGS defined, use the ones that MPICH was built with
    if [ -z "$LDFLAGS" ] ; then
        LDFLAGS="$LDFLAGSBASE"
    fi
    # Figure out the library list.  Because we want to support both a single
    # mpi library containing both C and Fortran interfaces, as well as 
    # a library that allows multiple Fortran interfaces, we may need different
    # library link lines.  With a unified C/Fortran library, we just
    # use -l${MPILIBNAME}.  With separate Fortran libraries, we need
    # -l<fortranwrapperlib> -l${MPILIBNAME} -l<fortransuplib>
    # We also handle the profiling library here, which may not be needed
    # for those systems that support weak symbols.
    if [ "${MPILIBNAME}" = "${FLIBNAME}" ] ; then
        mpilibs="-l${MPILIBNAME}"
    else
        mpilibs="-l${FLIBNAME} -l${MPILIBNAME} -l${FLIBNAME}fsup"
    fi
    # If the profiling library doesn't exist, or MPICH_NO_PROF environment
    # variable is set, skip the profiling library.
    if [ -n "$MPICH_NO_PROF" -o ! -s "$proflibfullname" ] ; then
        proflib=""
    fi
    # IRIX complains if we include a library twice.  In the case of a
    # library using weak symbols, we don't need the proflib.  Just
    # in case we do, there is an enviroment variable that
    # can be used to override this test.
    if [ "$MPI_WITH_PMPI" = "yes" -a "$MPICH_INCLUDE_PROFLIB" != yes ] ; then
        proflib=""
    fi
    # If proflib is non-empty, then add it
    if [ -n "$proflib" ] ; then
        # We include the last "mpilibs" because the mpilibs contains the
        # ADI routines.  There is a chance that a file in the first mpich.a
        # invokes a pmpi routine that needs an ADIO routine.
        mpilibs="$proflib $mpilibs $proflib $mpilibs"
    fi
    # See the comment in mpicc about UseSharedLib
    # Also, don't use if the shared libraries don't exist yet
    # (because -lmpichfarg.a won't exist yet)
    # ALSO, if sharedlibdir is the same as libdir, we must also add the
    # farg support library, since the linker is likely to prefer the 
    # shared library to the unshared one.
    if [ "$SHAREDKIND" != "ignore" -a \
        \( $UseSharedLib = "yes" -o "$sharedlibdir" = "$libdir" \) -a \
	-s ${libdir}/lib${FLIBNAME}farg.a ] ; then
	# We also add a library containing MPI_Init and the routines
        # that it uses to call getarg/iarg.  
	flibpath="${FLIB_PATH_LEADER}$sharedlibdir" 
        if [ -n "$SHARED_LIB_SEARCH_PATH_LEADER" ] ; then
	    flibpath="${SHARED_LIB_SEARCH_PATH_LEADER}$sharedlibdir $flibpath"
	fi
	if [ -n "$SHAREDLIB_LOCALDIR" ] ; then
	    flibpath="${FLIB_PATH_LEADER}$SHAREDLIB_LOCALDIR $flibpath"
 	    if [ -n "$SHARED_LIB_SEARCH_PATH_LEADER" ] ; then
	        flibpath="${SHARED_LIB_SEARCH_PATH_LEADER}$SHAREDLIB_LOCALDIR $flibpath"
	    fi
	fi
	mpilibs="-l${FLIBNAME}farg $mpilibs" 
    fi
    # The last F77_LDFLAGS is used in case there are Fortran libraries that 
    # need to be added to the link line (in the case where we use the C 
    # compiler to link programs)
    if [ "$F77LINKER" != "$F77" ] ; then
        F77_LAST_LDFLAGS="$F77_LDFLAGS"
    fi
    $Show $F77LINKER $F77_LDFLAGS $LDFLAGS $BASE_FFLAGS $USER_FFLAGS $flibpath ${FLIB_PATH_LEADER}${FLIB_PATH} $linkobjs $linkargs $MPILOG $mpilibs $BASE_LIB_LIST $FLIB_LIST $F77_LAST_LDFLAGS
    status=$?
fi
#
# If we added the link, remove it.
if [ $added_link = 1 ] ; then
    $Show rm -f mpif.h
    trap 0
fi
exit $status
