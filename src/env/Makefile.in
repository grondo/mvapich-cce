#  (C) 1993 by Argonne National Laboratory and Mississipi State University.
#      All rights reserved.  See COPYRIGHT in top-level directory.
#

CC          = @CC@
CLINKER     = @CLINKER@
AR          = @AR@
RANLIB      = @RANLIB@
OPTFLAGS    = @OPTFLAGS@
OPTFLAGSC   = @OPTFLAGSC@
prefix      = @prefix@
# exec_prefix is the default prefix for lib dir, needed to set the totalview
# DLL location
exec_prefix = @exec_prefix@
top_srcdir  = @top_srcdir@
srcdir      = @srcdir@
libbuild_dir = @libbuild_dir@
libdir      = @libdir@
MPILIBNAME  = @MPILIBNAME@
#
# initutil.c and finalize.c need mpi_fortran from src/fortran/include .
DEFS        = @DEFS@ ${MPIPROFILE} -I. -I${srcdir} -I${top_srcdir}/src/fortran/include @mpich_includes@
CFLAGS      = @CFLAGS@ -D_GNU_SOURCE

SHELL       = /bin/sh

@VPATH@

.SUFFIXES:
.SUFFIXES: .o .c .txt

LIBS = ${libbuild_dir}/lib${MPILIBNAME}.a

MPI_COBJECTS = abort.o debugutil.o init.o initthread.o initutil.o \
	finalize.o initialize.o \
	errorstring.o initdte.o \
	getpname.o errcreate.o errset.o errget.o errfree.o errclass.o \
	wtime.o wtick.o nerrmsg.o getversion.o msgqdllloc.o ismain.o \
	querythread.o
MPI_CSOURCES = abort.c debugutil.c init.c initthread.c initutil.c \
	finalize.c initialize.c errorstring.c initdte.c \
	getpname.c errcreate.c errset.c errget.c errfree.c errclass.c \
	wtime.c wtick.c nerrmsg.c getversion.c msgqdllloc.c ismain.c \
	querythread.c
MPI_TSOURCES = errclass.c 

MPI_SOURCES = ${MPI_CSOURCES}
MPI_OBJECTS = ${MPI_COBJECTS}

default: ${libbuild_dir}/lib${MPILIBNAME}.a

profile: ${libbuild_dir}/libp${MPILIBNAME}.a

# default_all is the same as default, but without the RANLIB.  This
# can speed up the build (ranlibs can take a LONG time).  profile_all 
# is the same, but for the profile library
default_all: default_objs 
default_objs: ${MPI_OBJECTS}
	${AR} ${libbuild_dir}/lib${MPILIBNAME}.a $?
default_conly: ${MPI_COBJECTS}
	${AR} ${libbuild_dir}/lib${MPILIBNAME}.a $?
	${RANLIB} ${libbuild_dir}/lib${MPILIBNAME}.a
profile_all: ${MPI_OBJECTS}
	${AR} ${libbuild_dir}/libp${MPILIBNAME}.a $?

${MPI_OBJECTS} :  ${MPI_INCLUDE}

mpe_debug_objs: @MPE_MPI_EXT_O@
	${AR} ${libbuild_dir}/lib${MPILIBNAME}.a @MPE_MPI_EXT_O@
	${RANLIB} ${libbuild_dir}/lib${MPILIBNAME}.a

source_names:
	@echo ${MPI_CSOURCES}

#
# This gives -mpiversion the ability to echo the configuration arguments.
# Make sure that the dependency on the patchlevel file is included
# so that mpichversion will work correctly
initutil.o: ${srcdir}/initutil.c ${top_srcdir}/include/patchlevel.h

mpich.En_US.cat: ${srcdir}/mpich.En_US.msg
	@GENCAT@ mpich.En_US.cat ${srcdir}/mpich.En_US.msg

# Create the message catalog files.  This will add ALL files, including the
# US English one
# The .m files are requires on IRIX and perhaps other platforms
# The files are put into the libbuild directory when building.  When
# installing, they are put into messagecat_dir.
message_cat: mpich.En_US.cat
	for file in ${srcdir}/mpich.*.msg ; do \
	fileroot=`basename $file .msg` ; \
	rm -f $fileroot.cat $fileroot.cat.m ; \
	@GENCAT@ $fileroot.cat $file > /dev/null 2>&1 ; \
	if test -s $fileroot.cat ; then \
	    rm -f ${libbuild_dir}/$fileroot.cat ; \
	    cp $fileroot.cat ${libbuild_dir} ; \
	fi ; \
	if test -s $fileroot.cat.m ; then \
	    rm -f ${libbuild_dir}/$fileroot.cat.m ; \
	    cp $fileroot.cat.m ${libbuild_dir} ; \
	fi ; \
	done )
	if test -s mpich.En_US.cat ; then \
	    if test ! -s ${libbuild_dir}/mpich.cat ; then \
	       (cd ${libbuild_dir} ; ln -s mpich.En_US.cat mpich.cat ) \
	    fi \
	else \
	    echo "Could not create catalog. US English messages will be used" ; \
	fi

#
# We should really put this entire directory AFTER src/infoexport; then we
# can test on the existance of the library.  
# We use PREFIX instead of MPIR_HOME so that the result of installing
# the MPI libraries will work
msgqdllloc.o: ${top_srcdir}/src/env/msgqdllloc.c
	@if test -n "@SHAREDKIND_FOR_TV@" -a "@SHAREDKIND_FOR_TV@" != "ignore" ; then \
	  ${CC} ${DEFS} ${CFLAGS} -c @CC_SHARED_OPT_FOR_TV@ \
	  -DMPICH_INFODLL_LOC='"@libdir@/libtvmpich.so"' ${top_srcdir}/src/env/msgqdllloc.c ; \
	else \
	    ${CC} ${DEFS} ${CFLAGS} -c ${top_srcdir}/src/env/msgqdllloc.c ; \
	fi

.c.o:
	${CC} ${DEFS} ${INCLUDES} ${CFLAGS} ${OPTFLAGSC} ${OPTFLAGS} -c $<
.c.txt:
	${CC} -E ${DEFS} ${INCLUDES} ${CFLAGS} ${OPTFLAGSC} ${OPTFLAGS} -c $< > $*.txt


# Always compile this with -g
# Warning: some systems might not support -g.  We'll deal with that when
# we have to.  We use the part of CFLAGS that does not include the
# optimization switches.
# Also add explicit -O0 *after* CFLAGS, which may include an -O2 or higher,
# for which the Intel compiler fails to define MPIR_PROCDESC correctly
debugutil.o: ${srcdir}/debugutil.c
	${CC} -g ${DEFS} ${INCLUDES} ${CFLAGS} -O0 ${INCLUDE_DIR} ${MPIPROFILE} -c 		${srcdir}/debugutil.c

# GETNAME_DEFS are needed by mpehname.c; these need mpe includes
mpehname.o: ${top_srcdir}/mpe/src/mpehname.c
	${CC} ${DEFS} ${CFLAGS} @GETNAME_DEFS@ -c -I${top_srcdir}/mpe/include \
		${top_srcdir}/mpe/src/mpehname.c 
# Note that we remove the link after we use it.
# It is tempting to put ${top_srcdir}/mpe/src/dbxerr.c as prerequisite here.
# But there is only dbxerr.c.in in ${top_srcdir}/mpe/src, dbxerr.c is created
# in ${mpich_build_dir}/mpe/src by configure.
dbxerr.o: ../../mpe/src/dbxerr.c
	${CC} ${DEFS} ${CFLAGS} @GETNAME_DEFS@ -c -I${top_srcdir}/mpe/include \
		../../mpe/src/dbxerr.c 
# errmsg needs to know about NLS definitions.
nerrmsg.o: ${srcdir}/nerrmsg.c mpierrstrings.h
	${CC} ${DEFS} ${CFLAGS} @NLS_DEFS@ -c ${srcdir}/nerrmsg.c

${libbuild_dir}/lib${MPILIBNAME}.a: ${MPI_OBJECTS}
	${AR} $@ $?
	${RANLIB} $@

${libbuild_dir}/libp${MPILIBNAME}.a: ${MPI_OBJECTS}
	${AR} $@ $?
	${RANLIB} $@
tstmsg:
	${CC} ${CFLAGS} -DTEST_MSGS @NLS_DEFS@ -c nerrmsg.c
	${CLINKER} -o nerrmsg nerrmsg.o ${libbuild_dir}/lib${MPILIBNAME}.a
	rm -f nerrmsg.o

# We need to clean the srcdir of any .o files because they can confuse the
# VPATH build process
clean:
	rm -f *.o *~ ${srcdir}/*.o
