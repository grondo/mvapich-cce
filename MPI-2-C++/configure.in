# -*- shell-script -*-

# This file is part of the University of Notre Dame implementation of
# the MPI 2 C++ bindings package.  See the LICENSE file in the top
# level directory for license and copyright information.

# Disable caching.
define([AC_CACHE_LOAD], )
define([AC_CACHE_SAVE], )

AC_INIT(src/mpi2c++/comm.h)

VERSION=`cat $srcdir/VERSION | cut -f5 -d\ `
echo "Configuring MPI-2 C++ bindings, version $VERSION"
AC_SUBST(VERSION)


# The third argument to AM_INIT_AUTOMAKE surpresses the PACKAGE and
# VERSION macors

AM_INIT_AUTOMAKE(mpi2c++, $VERSION, 'no')
AM_CONFIG_HEADER(src/mpi2c++/mpi2c++_config.h)

#
# Configure script for MPI C++ Bindings.
# Set some directories and some defaults.
#

TOPDIR=`pwd`
DISTDIR=`dirname $TOPDIR`


#
# Directories for other packages
#

if test "$prefix" != "NONE"; then
    INSTALLDIR=$prefix
else
    INSTALLDIR="/usr/local"
fi

MPI_IMP=other_vendor
MPI_DIR=$prefix
MPI_INCDIR=

#MPI_CXX=
# Do this later -- #$%^#$ HP-UX!!
MPI_CXXFLAGS=
MPI_LDFLAGS=
MPI_LIBS=


#
# Balky flags
#

BALKY_CXX=
BALKY_CXXFLAGS=
BALKY_LIBS=
BALKY_LDFLAGS=


#
# Compiler flags
#

NOOPT=
OPTFLAGS="-O"
EXAM_OPTFLAGS=$OPTFLAGS
TEST_OPTFLAGS=$OPTFLAGS


#
# Miscellaneous flags
#

MPICH_DEV=
LAM_CXXFLAGS=
EXTRA_CXXFLAGS=
EXCPTN_CXXFLAGS=
EXCPTN_LDFLAGS=
WANT_SOCKET_LIBS=
WANT_THREAD_LIBS=
ARCH=
EXFLAGS=
FORCE_EXFLAGS=

#
HAVE_BROKEN_NAMESPACES=0
UNDERLYING_CXX=
USING_MPICH=0
MPI_MIDDLE_NAME=
MINI_BALKY_CXXFLAGS=
BALKY_CXXFLAGS=


#
# Ensure not to get a user aliased grep
#

if test -x /bin/grep; then
    GREP=/bin/grep
elif test -x /usr/bin/grep; then
    GREP=/usr/bin/grep
elif test -x /sbin/grep; then
    GREP=/sbin/grep
elif test -x /usr/sbin/grep; then
    GREP=/usr/sbin/grep
else
    AC_PATH_PROG(GREP, grep, grep)
fi

#
# Get our system type
# Set up for some screwy machines
#

AC_CANONICAL_HOST

# 
# WDG: It is *wrong* to set these options before we know what compiler
# we are using.  After all, we may be using g++!
#
# (case on host moved to later)
case "$host" in
    *-hp-hpux*)
        # WDG, 11/9/99:
	# It is *NOT* correct to chose compiler flags based on the system
        # For example, what if g++ is being used?
        # The following flags for are the aCC compiler.  
        # Unfortunately, the compiler isn't available yet, so I can't
	# add the appropriate tests.  Errg.  
	if test "$GXX" = ""; then
	    EXTRA_CXXFLAGS="+W829,736"
	    CXXFLAGS="$CXXFLAGS $EXTRA_CXXFLAGS"
	    EXFLAGS="+eh"

	    NOOPT="-Wl,+vnocompatwarnings"
	    OPTFLAGS="+O1 -Wl,+vnocompatwarnings"
	    EXAM_OPTFLAGS=$OPTFLAGS
	    TEST_OPTFLAGS=$OPTFLAGS
	    
	    MPI_CXX_SAVE=$MPI_CXX
	    
	    ARCH=HPUX
	fi
        ;;

    mips-sgi-irix*)
        OPTFLAGS="-O3"
        TEST_OPTFLAGS=$OPTFLAGS
        EXAM_OPTFLAGS=$OPTFLAGS
	ARCH=IRIX
        ;;

    *-cray-unicos*)
	# Yuk!  We have to turn off all optimization in the test suite because
	# Cray's CC version 3.0.0.0 runs out of memory when compiling modules
	# like port_test.cc and request_array_test.cc.  Doh!!

	NOOPT="-O0"
	OPTFLAGS="-O3"
	TEST_OPTFLAGS=$NOOPT
	EXAM_OPTFLAGS=$OPTFLAGS

	EXFLAGS="-h exceptions"
	ARCH=CRAY
	;;
esac

#
# Now we can clear MPI_CXX
#

MPI_CXX=


#
# Set autoconf for C++
#

AC_LANG_CPLUSPLUS


#
# Figure out which brand of echo we have and define
# prompt and print shell functions accordingly.
#
# Blatently stolen from the TIFF configure file.
#

if test `echo foo\\\c`@ = "foo@"; then
    prompt()
    {
        echo "$* \\c"
    }
elif test "`echo -n foo`@" = "foo@"; then
    prompt()
    {
        echo -n "$* "
    }
else
    prompt()
    {
        echo "$*"
    }
fi


#
# Find some extra programs
#

AC_PATH_PROG(AWK, awk)
AC_PATH_PROG(WC, wc)


#
# Check --with values for specific MPI implementations.  Check for:
#  - wrapper compilers that come with some implementations
#  - specific options necessary for some MPI implementations
#
# LAM 6.3/6.4
#

AC_ARG_WITH(lam,	 [--with-lam=MPI_DIR	Top-level install directory for LAM/MPI], MPI_IMP="lam" WITHDIR=$withval)

if test "$MPI_IMP" = "lam"; then

    # Run lamboot with a dummy hostfile to find out what version it is

    MPI_CXX=no
    if test "$WITHDIR" != "" -a -x "$WITHDIR/bin/hcp"; then
	AC_MSG_CHECKING([for hcp])
	MPI_CXX=$WITHDIR/bin/hcp
	LAMBOOT=$WITHDIR/bin/lamboot
	LAMWIPE=$WITHDIR/bin/wipe
	AC_MSG_RESULT([$MPI_CXX])
    elif test "$WITHDIR" != "" -a -x "$WITHDIR/hcp"; then
	AC_MSG_CHECKING([for hcp])
	MPI_CXX=$WITHDIR/hcp
	LAMBOOT=$WITHDIR/lamboot
	LAMWIPE=$WITHDIR/wipe
	AC_MSG_RESULT([$MPI_CXX])
    else
	AC_PATH_PROG(MPI_CXX, hcp, no)
    fi

    if test "$MPI_CXX" = "no"; then
        AC_MSG_ERROR([cannot continue -- put hcp in your path])
    else
	LAMBOOT=`dirname $MPI_CXX`/lamboot
	LAMWIPE=`dirname $MPI_CXX`/wipe
    fi
    CXX=$MPI_CXX

    MPI_LIBS=" "

    AC_MSG_CHECKING([for LAM/MPI version])
    VER=`$LAMBOOT -V | $GREP LAM`
    if test "`echo $VER | $GREP 6.1`" != ""; then
	AC_MSG_RESULT([$LAMVER (you should upgrade)])
	AC_MSG_WARN([*** LAM/MPI 6.1 is no longer supported.])
	WANT_UPGRADE=1

    elif test "`echo $VER | $GREP 6.2`" != ""; then
	AC_MSG_RESULT([$LAMVER (you should upgrade)])
	AC_MSG_WARN([*** LAM/MPI 6.2 is no longer supported.])
	WANT_UPGRADE=1

    elif test "`echo $VER | $GREP 6.3.1`" != ""; then
	AC_DEFINE(MPI2CPP_LAM631, 1)
	AC_MSG_RESULT([$LAMVER (you should upgrade)])
	AC_MSG_WARN([*** LAM/MPI 6.3.1 is no longer supported.])
	WANT_UPGRADE=1

    elif test "`echo $VER | $GREP 6.3.2`" != ""; then
	AC_DEFINE(MPI2CPP_LAM632, 1)
	AC_MSG_RESULT([$LAMVER (you should upgrade)])
	AC_MSG_WARN([*** LAM/MPI 6.3.2 is no longer supported.])
	WANT_UPGRADE=1

    elif test "`echo $VER | $GREP 6.3.3`" != ""; then
	LAMVER=6.3.3
	LAMCXXFLAGS="-DLAM_BUILDING=1"
	AC_DEFINE(MPI2CPP_LAM633, 1)
	AC_MSG_RESULT([$LAMVER (good)])
	WANT_UPGRADE=0

    elif test "`echo $VER | $GREP 6.3`" != ""; then
	LAMVER=6.3
	AC_MSG_RESULT([$LAMVER (you should upgrade)])
	AC_MSG_WARN([*** LAM/MPI 6.3 is no longer supported.])
	WANT_UPGRADE=1

    elif test "`echo $VER | $GREP 6.4`" != ""; then
	LAMVER=6.4
	AC_DEFINE(MPI2CPP_LAM64, 1)
	AC_MSG_RESULT([$LAMVER (good)])
	WANT_UPGRADE=0
    else
	LAMVER=no
	AC_DEFINE(MPI2CPP_LAMUNKNOWN, 1)
	AC_MSG_RESULT([cannot determine LAM version -- good luck])
    fi
    if test "$WANT_UPGRADE" = "1"; then
	AC_MSG_WARN([*** WARNING: You are using an old version of LAM/MPI.])
	AC_MSG_WARN([*** You should upgrade to the latest version.])
	AC_MSG_WARN([*** See http://www.mpi.nd.edu/lam/])
	AC_MSG_ERROR([*** Cannot continue])
    fi
    MPI_MIDDLE_NAME="lam"

    # Get the underlying compiler name so that we can check for
    # exception flags properly

    AC_MSG_CHECKING([for LAM's underlying C++ compiler])
    full="`hcp -showme`"
    first="`echo $full | awk '{ print $1 }'`"
    UNDERLYING_CXX="`basename $first`"
    if test "$UNDERLYING_CXX" = "libtool"; then
	first=1
	done=0
	for word in $full ; do
	    if test "$done" = "0"; then
		name="`basename $word`"
		if test "$first" != "1" -a \
			"`echo $word | cut -c1-2`" != "--"; then
		    UNDERLYING_CXX="$word"
		    done=1
		fi
		first=0
	    fi
	done
	AC_MSG_RESULT([$UNDERLYING_CXX (via libtool)])
    else
	AC_MSG_RESULT([$UNDERLYING_CXX])
    fi

    # If we're building LAM (and we should be -- we shouldn't be
    # compiling this from outside of LAM anymore!), set some flags

    AC_ARG_WITH(lam-building, [--with-lam-building   Only used internally to LAM/MPI], MINI_BALKY_CXXFLAGS="-lam-building")
fi

#
# MPICH 1.2.0 (or higher)
#

MPICH_BIN=
MPICH_SRC=
MPILIB_DIR=

AC_ARG_WITH(mpich,	[--with-mpich=MPI_DIR    Top-level install directory for MPICH/MPI], MPI_IMP="mpich" WITHDIR=$withval)
AC_ARG_WITH(mpichdev,	[--with-mpichdev=LIBDIR  Library subdirectory for MPICH/MPI], MPI_IMP="mpich" MPICH_DEV=$withval)
AC_ARG_WITH(mpichbin,   [--with-mpichbin=BINDIR  bin subdirectory for MPICH/MPI], MPI_IMP="mpich" MPICH_BIN=$withval)
AC_ARG_WITH(mpichsrc,   [--with-mpichsrc=SRCDIR  source home for MPICH/MPI], MPI_IMP="mpich" MPICH_SRC=$withval)
AC_ARG_WITH(mpichlib,   [--with-mpichlib=LIBDIR  Library directory for MPICH/MPI], MPI_IMP="mpich" MPILIB_DIR=$withval)
AC_ARG_WITH(mpichlibname,[--with-mpichlibname=NAME Alternate name for MPICH library],MPI_IMP="mpich" MPICH_LIBNAME=$withval,MPICH_LIBNAME="mpich")
if test "$MPI_IMP" = "mpich"; then

    if test "$WITHDIR" = "yes"; then
        AC_MSG_ERROR([supplied --with-mpich without a directory])
    fi
    USING_MPICH=1

    AC_MSG_CHECKING([MPICH version])
    patchfile=$WITHDIR/include/patchlevel.h
    if test ! -s $patchfile -a -n "$MPICH_SRC" ; then
	# look for it in the source location
        if test -s $MPICH_SRC/include/patchlevel.h ; then
	    patchfile=$MPICH_SRC/include/patchlevel.h
	fi
    fi

    if test ! -s $patchfile; then
	AC_MSG_WARN([Cannot find the patchfile.  Hence, cannot determine])
	AC_MSG_WARN([MPICH's version.  Perhaps you need to])
	AC_MSG_WARN([specify where the MPICH source tree is with the])
	AC_MSG_WARN([--with-mpich-srcdir flag...?])
	AC_MSG_WARN([Going to make a best guess... (good luck!)])
	# Stoopid emacs mode: '
	AC_DEFINE(MPI2CPP_MPICHUNKNOWN, 1)
    else
	MPICH_VERSION=`cat $patchfile | awk '{print $3}' | sed -e 's/\.[0-9]//' | tr '\012' '.'`
	if test "$MPICH_VERSION" = "1.0.0.13."; then
	    AC_MSG_RESULT([1.0.13 (you should upgrade)])
	    WANT_UPGRADE=1
	elif test "$MPICH_VERSION" = "1.1.0."; then
	    AC_MSG_RESULT([1.1.0 (you should upgrade)])
	    WANT_UPGRADE=1
	else
	
	    #
	    # Argh!  MPICH changed the format of their patchlevel file
	    # as of version 1.1.1.
	    #

	    MPICH_VERSION=`grep 'PATCHLEVEL ' $patchfile | awk '{print $3}'`
	    mv1=`grep 'PATCHLEVEL_SUBMINOR' $patchfile | awk '{print $3}'`
	    MPICH_VERSION="$MPICH_VERSION.$mv1."
	    
	    if test -z "$MPILIB_DIR" ; then
		MPILIB_DIR=$WITHDIR/$MPICH_DEV
	    fi
	    if test "$MPICH_VERSION" = "1.1.1."; then
		AC_MSG_RESULT([1.1.1 (you should upgrade)])
		WANT_UPGRADE=1
	    elif test "$MPICH_VERSION" = "1.1.2."; then
		AC_MSG_RESULT([1.1.2 (you should upgrade)])
		WANT_UPGRADE=1
	    elif test "$MPICH_VERSION" = "1.1.3."; then
		# Need to make this MPICH113 eventually
		AC_MSG_RESULT([1.1.3 (you should upgrade)])
		WANT_UPGRADE=1
	    elif test "$MPICH_VERSION" = "1.2.0."; then
		AC_DEFINE(MPI2CPP_MPICH120)
		AC_MSG_RESULT([1.2.0 (good)])
		WANT_UPGRADE=0
		if test -z "$MPICH_BIN"; then
		    AC_MSG_ERROR([when configuring for 1.2.0, --with-mpichbin must be specified])
		fi
	    elif test "$MPICH_VERSION" = "1.2.1."; then
		AC_DEFINE(MPI2CPP_MPICH121)
		AC_MSG_RESULT([1.2.1 (good)])
		WANT_UPGRADE=0
		if test -z "$MPICH_BIN"; then
		    AC_MSG_ERROR([when configuring for 1.2.1, --with-mpichbin must be specified])
		fi
	    elif test "$MPICH_VERSION" = "1.2.2."; then
		AC_DEFINE(MPI2CPP_MPICH121)
		AC_MSG_RESULT([1.2.2 (good)])
		WANT_UPGRADE=0
		if test -z "$MPICH_BIN"; then
		    AC_MSG_ERROR([when configuring for 1.2.2, --with-mpichbin must be specified])
		fi
	    elif test "$MPICH_VERSION" = "1.2.3."; then
		AC_DEFINE(MPI2CPP_MPICH121)
		AC_MSG_RESULT([1.2.3 (good)])
		WANT_UPGRADE=0
		if test -z "$MPICH_BIN"; then
		    AC_MSG_ERROR([when configuring for 1.2.3, --with-mpichbin must be specified])
		fi
	    elif test "$MPICH_VERSION" = "1.2.4."; then
		AC_DEFINE(MPI2CPP_MPICH121)
		AC_MSG_RESULT([1.2.4 (good)])
		WANT_UPGRADE=0
		if test -z "$MPICH_BIN"; then
		    AC_MSG_ERROR([when configuring for 1.2.4, --with-mpichbin must be specified])
		fi
	    elif test "$MPICH_VERSION" = "1.2.5."; then
		AC_DEFINE(MPI2CPP_MPICH121)
		AC_MSG_RESULT([1.2.5 (good)])
		WANT_UPGRADE=0
		if test -z "$MPICH_BIN"; then
		    AC_MSG_ERROR([when configuring for 1.2.5, --with-mpichbin must be specified])
		fi
	    elif test "$MPICH_VERSION" = "1.2.6."; then
		AC_DEFINE(MPI2CPP_MPICH121)
		AC_MSG_RESULT([1.2.6 (good)])
		WANT_UPGRADE=0
		if test -z "$MPICH_BIN"; then
		    AC_MSG_ERROR([when configuring for 1.2.6, --with-mpichbin must be specified])
		fi
	    else
		AC_DEFINE(MPI2CPP_MPICHUNKNOWN, 1)
		AC_MSG_RESULT([unrecognized MPICH level -- good luck!])
	    fi
	    
	fi
    fi
    
    if test "$WANT_UPGRADE" = "1"; then
	AC_MSG_WARN([*** WARNING: It looks like you are using an old])
	AC_MSG_WARN([*** version of MPICH.])
	AC_MSG_WARN([*** You need to upgrade to the latest version.])
	AC_MSG_WARN([*** See http://www.mcs.anl.gov/mpi/mpich/])
	AC_MSG_ERROR([*** Cannot continue.])
    fi

    if test -z "$MPILIB_DIR" ; then
        MPILIB_DIR=$WITHDIR/$MPICH_DEV
    fi

    OLD_ARCH=$ARCH
    if test -x $WITHDIR/util/tarch; then 
	ARCH=`$WITHDIR/util/tarch | sed s/-/_/g`
    elif test -x $WITHDIR/bin/tarch; then
	ARCH=`$WITHDIR/bin/tarch | sed s/-/_/g`
    fi

    if test -d "$WITHDIR/lib"; then
      MPICHLIBDIR=$WITHDIR/lib/$ARCH
    elif test -d "$WITHDIR/build"; then
      MPICHLIBDIR=$WITHDIR/build/$ARCH
    elif test ! -z "$MPILIB_DIR"; then
      MPICHLIBDIR="$MPILIB_DIR"
    else
	AC_MSG_ERROR([could not find MPICH support for $ARCH])
    fi

    if test ! "$MPICH_DEV" = ""; then
	DEVICE=$MPICH_DEV
    elif test -d "$MPICHLIBDIR"; then
	echo "no MPICH device specified"
	AC_MSG_CHECKING([for existing MPICH devices])
	devices=""
	for device in `/bin/ls $MPICHLIBDIR`; do
	    if test -d $MPICHLIBDIR/$device; then
		devices="$device $devices"
	    fi
	done
	devices=`echo "$devices" | sed -e 's/^[ 	]*//' -e 's/[ 	]*$//'`
	
	device_count=`echo $devices | $WC | $AWK '{ print $2 }'`

	#
	# How many did we find?
	#

	if test "$device_count" = "0"; then
	    AC_MSG_RESULT([none found])
	    AC_MSG_ERROR([cannot continue])
	elif test "$device_count" = "1"; then
	    DEVICE=$devices
	    AC_MSG_RESULT([found $DEVICE MPICH device])
	else
	    AC_MSG_RESULT([found multiple MPICH devices])
	    DEVICE=0
	    while test "$DEVICE" = "0"; do
		prompt "Please select an MPICH device ($devices):"
		read DEVICE
		DEVICE=`echo "$DEVICE" | sed -e 's/^[	]*//' -e 's/[	]*$//'`

		if test ! -d "$MPICHLIBDIR/$DEVICE"; then
		    echo "$DEVICE MPICH device not found"
		    DEVICE=0
		fi
	    done
	fi
	MPICH_DEV=$MPICHLIBDIR/$DEVICE

	# #$%^$#%^$@%@#%@#$!!!!!!!
	# Don't ask.  Trust us.
	# (the directory structure for MPICH changed between 1.1.1 and 1.1.2
	if test "$MPICH_VERSION" = "1.1.2."; then
	    MPICH_DEV=$MPICH_DEV/lib
	fi
    else
	AC_MSG_ERROR([could not find MPICH support for $ARCH])
    fi
    
    ARCH=$OLD_ARCH

    # Look for the actual PROGRAMS; don't use the versions!
    if test -x $MPICH_BIN/mpicxx ; then
        # MPICH 1.2.5 and later; MPICH2
        MPI_CXX=$MPICH_BIN/mpicxx
    elif test -x $MPICH_BIN/mpiCC ; then
        # MPICH 1.2.0 to 1.2.4
        MPI_CXX=$MPICH_BIN/mpiCC
    else
	MPI_CXX=mpiCC
    fi
    CXX=$MPI_CXX
    # Tell mpiCC to not load mpi++.h when reading mpi.h
    CXXFLAGS="$CXXFLAGS -DMPICH_SKIP_MPICXX"
    MPI_LIBS="-l$MPICH_LIBNAME"

    # JGS not sure were these should go
    MPI_CXXFLAGS="-I$WITHDIR/include -I$WITHDIR"
    MPI_LDFLAGS="-L$WITHDIR/$MPICH_DEV"

    # Get the underlying compiler name so that we can check for
    # exception flags properly

    AC_MSG_CHECKING([for MPICH's underlying C++ compiler])
    full="`$MPI_CXX -show`"
    first="`echo $full | awk '{ print $1 }'`"
    UNDERLYING_CXX="`basename $first`"
    if test "$UNDERLYING_CXX" = "libtool"; then
	first=1
	done=0
	for word in $full ; do
	    if test "$done" = "0"; then
		name="`basename $word`"
		if test "$first" != "1" -a \
			"`echo $word | cut -c1-2`" != "--"; then
		    UNDERLYING_CXX="$word"
		    done=1
		fi
		first=0
	    fi
	done
	AC_MSG_RESULT([$UNDERLYING_CXX (via libtool)])
    else
	AC_MSG_RESULT([$UNDERLYING_CXX])
    fi


    if test "$ARCH" != "IRIX"; then
	WANT_SOCKET_LIBS=1
    else
	#MPI_CXXFLAGS="$MPI_CXXFLAGS -64"
	#MPI_LDFLAGS="$MPI_LDFLAGS -64"

	#CXXFLAGS="$CXXFLAGS -64"
	#LDFLAGS="$LDFLAGS -64"
        :
    fi
    WANT_THREAD_LIBS=1
fi


#
# IBM SP
#

AC_ARG_WITH(sp,	[--with-sp		Use IBM's SP/MPI], MPI_IMP="ibm-sp" CXX=mpCC)

# Stoopid emacs mode: '

if test "$MPI_IMP" = "ibm-sp"; then
    AC_PATH_PROG(MPI_CXX, mpCC, doh)
    if test "$MPI_CXX" = "doh"; then
        AC_MSG_CHECKING([for mpCC (elsewhere)])
        foreach comp /bin/mpCC /usr/bin/mpCC
            if test "$MPI_CXX" = "" -a -x $comp; then
                AC_MSG_RESULT([yes])
                MPI_CXX=$comp
            fi
        end
        if test "$MPI_CXX" = ""; then
            AC_MSG_RESULT([no])
            AC_MSG_ERROR([cannot continue -- put mpCC in your path])
        fi
    fi
    CXX=$MPI_CXX
   
    OPTFLAGS="-O3 -qstrict -qarch=pwr2 -qtune=pwr2s -Q"
    TEST_OPTFLAGS=$OPTFLAGS
    EXAM_OPTFLAGS=$OPTFLAGS

    AC_MSG_CHECKING([POE version])
    POE_VERSION=`lslpp -L ppe.poe | $GREP poe | awk '{ print $2 }'`
    if test "$POE_VERSION" = "2.1.0.14"; then
        AC_DEFINE(MPI2CPP_IBM21014)
        AC_MSG_RESULT([2.1.0.14 (you should upgrade)])
    elif test "$POE_VERSION" = "2.1.0.15"; then
        AC_DEFINE(MPI2CPP_IBM21015)
        AC_MSG_RESULT([2.1.0.15 (you should upgrade)])
    elif test "$POE_VERSION" = "2.1.0.16"; then
        AC_DEFINE(MPI2CPP_IBM21016)
        AC_MSG_RESULT([2.1.0.16 (you should upgrade)])
    elif test "$POE_VERSION" = "2.1.0.17"; then
        AC_DEFINE(MPI2CPP_IBM21017)
        AC_MSG_RESULT([2.1.0.17 (you should upgrade)])
    elif test "$POE_VERSION" = "2.1.0.18"; then
        AC_DEFINE(MPI2CPP_IBM21018)
        AC_MSG_RESULT([2.1.0.18 (you should upgrade)])
    elif test "$POE_VERSION" = "2.3.0.0"; then
        AC_DEFINE(MPI2CPP_IBM2_3_0_0)
        AC_MSG_RESULT([2.3.0.0 (you should upgrade)])
    elif test "$POE_VERSION" = "2.4.0.0"; then
        AC_DEFINE(MPI2CPP_IBM2_4_0_0)
        AC_MSG_RESULT([2.4.0.0 (good)])
    else
        AC_DEFINE(MPI2CPP_IBMUNKNOWN)
        AC_MSG_RESULT([Unknown version -- $POE_VERSION (good luck)])
    fi
fi


#
# SGI IRIX 6.4
#

AC_ARG_WITH(sgi,	[--with-sgi		Use SGI's IRIX/64 MPI], MPI_IMP="sgi" CXX=CC)
AC_ARG_WITH(sgi64,	[--with-sgi64		Use SGI's IRIX/64 MPI (force 64 bit mode)], MPI_IMP="sgi64" CXX=CC)

if test "$MPI_IMP" = "sgi" -o "$MPI_IMP" = "sgi64"; then
    MPI_LIBS="-lmpi"

    # Strategy: build up a list of all the libdirs.  Then search for
    # the appropriate libmpi.so or libmpi.a.  

    libpaths=/tmp
    if test "?$LD_LIBRARY64_PATH" != "0"; then
	libpaths="$LD_LIBRARY64_PATH"
    fi
    if test "?$LD_LIBRARYN32_PATH" != "0"; then
	libpaths="$LD_LIBRARYN32_PATH:$libpaths"
    fi
    if test "?$LD_LIBRARY_PATH" != "0"; then
	libpaths="$LD_LIBRARY_PATH:$libpaths"
    fi

    # If they just said "--with-sgi", go find the libmpi.so

    LIBDIR=
    if test "$MPI_IMP" = "sgi"; then
	num=1
	dir="`echo $libpaths | cut -d: -f$num`"

	# Iterate through the dirs, look for a libmpi.a or libmpi.so

	while test "$dir" != ""; do
	    if test -f $dir/libmpi.so -o -f $dir/libmpi.a; then
		LIBDIR="$dir"
		dir=""
	    else
		num="`expr $num + 1`"
		dir="`echo $libpaths | cut -d: -f$num`"
	    fi
	done
	if test "$LIBDIR" = ""; then
	    AC_MSG_WARN([Cannot find libmpi.(a|so)])
	    AC_MSG_ERROR([Cannot continue])
	fi
	isn32="`echo $LIBDIR | $GREP /libn32/`"
	is64="`echo $LIBDIR | $GREP /lib64/`"
        if test "$isn32" != ""; then
            SGIFLAGS="-n32"
            SGIBIT="n32"
        elif test "$is64" != ""; then
            SGIFLAGS="-64"
            SGIBIT="64"
	else
	    SGIFLAGS=""
	    SGIBIT="32"
        fi
    elif test "$MPI_IMP" = "sgi64"; then
	num=1
	dir="`echo $libpaths | cut -d: -f$num`"

	# Iterate through the dirs, look for libmpi.a or libmpi.so,
	# but it must have /lib64/ in the directory name.

	while test "$dir" != ""; do
	    if test \( -f $dir/libmpi.so -o -f $dir/libmpi.a \) -a \
	      "`echo $dir | $GREP /lib64/`" != ""; then
		LIBDIR="$dir"
		dir=""
	    else
		num="`expr $num + 1`"
		dir="`echo $libpaths | cut -d: -f$num`"
	    fi
	done
	if test "$LIBDIR" = ""; then
	    AC_MSG_WARN([Cannot find 64 bit libmpi.(a|so)])
	    AC_MSG_ERROR([Cannot continue])
	fi
        SGIFLAGS="-64"
        SGIBIT="64"
    fi

    # Now that we found it, find the version number

    AC_MSG_CHECKING([SGI MPI version])
    WANT_UPGRADE=
    IS20=`strings $LIBDIR/libmpi.so | $GREP "SGI MPI 2.0"`
    if test "$IS20" != ""; then    
        AC_MSG_RESULT([2.0 ($SGIBIT) -- you should upgrade])
	WANT_UPGRADE=1
    else

      IS20=`strings $LIBDIR/libmpi.so | $GREP "SGI MPI 2.0"`
      if test "$IS20" != ""; then    
        AC_MSG_RESULT([2.0 ($SGIBIT) -- you should upgrade])
	WANT_UPGRADE=1
      else

        IS30=`strings $LIBDIR/libmpi.so | $GREP "SGI MPI 3.0"`
        if test "$IS30" != ""; then
            AC_DEFINE(MPI2CPP_SGI30)
            AC_MSG_RESULT([3.0 ($SGIBIT) -- you should upgrade])
	    WANT_UPGRADE=1
        else

          IS31=`strings $LIBDIR/libmpi.so | $GREP "SGI MPI 3.1"`
          if test "$IS31" != ""; then
              AC_DEFINE(MPI2CPP_SGI31)
              AC_MSG_RESULT([3.1 ($SGIBIT) -- you should upgrade])
	      WANT_UPGRADE=1
          else

	    IS32=`strings $LIBDIR/libmpi.so | $GREP "SGI MPI 3.2.0.0"`
	    if test "$IS32" != ""; then
		AC_DEFINE(MPI2CPP_SGI32)
		AC_MSG_RESULT([3.2 ($SGIBIT) -- you should upgrade])

		# We'll let this one go, 'cause it's the last one that
		# real users can use this package with -- SGI already
		# includes this package in every version after this.

	    else
              VER=`strings $LIBDIR/libmpi.so | $GREP "SGI MPI"`
              AC_DEFINE(MPI2CPP_SGIUNKNOWN)
              
              AC_MSG_RESULT([Unknown version ($SGIBIT) -- $VER (good luck)])
	      AC_MSG_WARN([*** WARNING: It is likely that you are using a version])
	      AC_MSG_WARN([*** later than SGI MPI 3.2.0.0 (or later than the])
	      AC_MSG_WARN([*** Message Passing Toolkit 1.3).  SGI started including])
	      AC_MSG_WARN([*** this package in their MPI starting with MPT 1.4.])
	      AC_MSG_WARN([*** As such, you probably do not need this package, and])
	      AC_MSG_WARN([*** it is likely that this compilation will fail.])
	    fi
          fi
        fi
      fi
    fi

    if test "$WANT_UPGRADE" = "1"; then
        AC_MSG_WARN([*** You are advised to get the latest version of SGI's MPI])
        AC_MSG_WARN([*** See http://www.sgi.com/Products/Evaluation/evaluation.html])
	AC_MSG_ERROR([*** Cannot continue.])
    fi

    MPI_CXXFLAGS="$SGIFLAGS"
    MPI_LDFLAGS="$SGIFLAGS"
fi


#
# Cray
#

AC_ARG_WITH(cray,       [--with-cray             Use Cray's native MPI], MPI_IMP="cray")

if test "$MPI_IMP" = "cray"; then
    MPI_LIBS="-lmpi"
# Per jitterbug PR#59, assuming the native compiler is not necessarily
# a good thing
    if test "$?CXX" = "0"; then
	CXX=CC
    fi
    MPI_CXX="$CXX"

    AC_DEFINE(MPI2CPP_CRAY)
    AC_MSG_CHECKING([Cray MPI version])
    CRAYVER=`ls -ld /opt/ctl/mpt/mpt | awk '{ print $11 }' | cut -d/ -f5`
    if test "$CRAYVER" = "1.1.0.4"; then
        AC_DEFINE(MPI2CPP_CRAY1104)
	AC_MSG_RESULT([1.1.0.4 (good)])
    else
	AC_DEFINE(MPI2CPP_CRAYUNKNOWN)
	AC_MSG_RESULT([unknown Cray MPI version -- good luck!])
    fi

# It seems that this flag is way outdated (per C++ jitterbut PR#59)
#    MPI_CXXFLAGS="-hnomessage=427"
    MPI_CXXFLAGS=
    MPI_LDFLAGS=""
fi


#
# HP-UX
#

AC_ARG_WITH(hp,		[--with-hp		Use HP's HP-UX 10.x MPI], MPI_IMP="hp")

if test "$MPI_IMP" = "hp"; then
        if test "$MPI_ROOT" = ""; then
                MPI_ROOT="/opt/mpi"
                AC_MSG_WARN([\$MPI_ROOT is defaulting to /opt/mpi.])
                AC_MSG_WARN([Override it by setting it manually and re-running configure.])
        fi

	MPI_CXX=$MPI_CXX_SAVE
        if test "$MPI_CXX" = ""; then
                MPI_CXX=aCC
                AC_MSG_WARN([You need to set \$MPI_CXX to the appropriate compiler.])
                AC_MSG_WARN([Defaulting to aCC.])
        fi

        AC_MSG_CHECKING([HP-UX MPI version])
        if ! test -r $MPI_ROOT/lib/pa1.1/libmpi.a; then
                AC_MSG_RESULT([cannot find libmpi.a!])
                AC_MSG_ERROR([Is \$MPI_ROOT set properly?])
        fi

        HPSTR=`what $MPI_ROOT/lib/pa1.1/libmpi.a | $GREP "HP MPI"`
	HPVER=`echo $HPSTR | cut -d. -f2-3`
        if test "$HPVER" = "01.02"; then
                AC_DEFINE(MPI2CPP_HPUX0102)
                AC_MSG_RESULT([1.2 (you should upgrade)])
	else
		HPVER=`echo "$HPSTR" | sed -e "s/[[^0-9\.]]*//" | cut -c1-5`
               	if test "$HPVER" = "01.03"; then
			AC_DEFINE(MPI2CPP_HPUX0103)
			AC_MSG_RESULT([1.3 (good )])
                elif test "$HPVER" = "01.05"; then
                        AC_DEFINE(MPI2CPP_HPUX0105)
                        AC_MSG_RESULT([1.5 (good)])
		else
                	AC_DEFINE(MPI2CPP_HPUXUNKNOWN)
                	AC_MSG_RESULT([Unknown version -- $HPVER (good luck)])
        	fi
	fi

        AC_MSG_CHECKING([for mpiCC compiler])
        if test -x $MPI_ROOT/bin/mpicxx; then
                CXX="$MPI_ROOT/bin/mpicxx"
                AC_MSG_RESULT([$CXX])
        elif test -x $MPI_ROOT/bin/mpiCC; then
                CXX="$MPI_ROOT/bin/mpiCC"
                AC_MSG_RESULT([$CXX])
        else
                AC_MSG_RESULT([not found!])
                AC_MSG_ERROR([ensure that mpiCC is in \$MPI_ROOT/bin])
        fi
fi


#
# Generic MPI: Top-level dir
#

AC_ARG_WITH(mpidir,	[--with-mpidir=MPI_DIR	Top-level MPI directory (if not listed above)], MPI_IMP="supplied-topdir" MPI_DIR=$withval)

if test "$MPI_IMP" = "supplied-topdir"; then
    if test ! -d $WITHDIR; then
        AC_MSG_ERROR([$WITHDIR does not exist])
    elif test ! -d $WITHDIR/include; then
        AC_MSG_ERROR([$WITHDIR/include does not exist])
    elif test ! -d $WITHDIR/lib; then
        AC_MSG_ERROR([$WITHDIR/lib does not exist])
    fi

    MPI_CXXFLAGS="-I$MPIDIR/include"
    MPI_LDFLAGS="-L$WITHDIR/$MPICHLIBDIR"
    MPI_LIBS="-lmpi"
    WANT_SOCKET_LIBS=1
fi


#
# Generic MPI: Include directory / library directory
#

AC_ARG_WITH(mpiinc,	[--with-mpiinc=MPI_INC	Directory where mpi.h exists], MPI_IMP="supplied-indiv" INCDIR=$withval)
AC_ARG_WITH(mpilib,	[--with-mpilib=MPI_INC	Directory where libmpi.a exists], MPI_IMP="supplied-indiv" LIBDIR=$withval)

if test "$MPI_IMP" = "supplied-indiv"; then
    if test "$INCDIR" = ""; then
        AC_MSG_ERROR([no include directory specified (--with-mpiinc)])
    elif test "$LIBDIR" = ""; then
        AC_MSG_ERROR([no library directory specified (--with-mpilib)])
    elif test ! -d "$INCDIR"; then
        AC_MSG_ERROR([$INCDIR does not exist])
    elif test ! -d "$LIBDIR"; then
        AC_MSG_ERROR([$LIBDIR does not exist])
    fi

    MPI_CXXFLAGS="-I$INCDIR/include"
    MPI_LDFLAGS="-L$LIBDIR/lib"
    MPI_LIBS="-lmpi"
    WANT_SOCKET_LIBS=1
fi

#
# Profilable option for MPI C++ Bindings
#

AC_ARG_WITH(profiling,	[--with-profiling	Make the profilable C++ bindings], WANT_PROFILE=$withval, WANT_PROFILE="no")
AC_MSG_CHECKING([if want profiling support])
if test "$WANT_PROFILE" = "yes"; then 
    AC_DEFINE(_MPIPP_PROFILING_,1) 
    MPI2CPP_LIBRARY="libpmpi++.a"
    MPI2CPP_LIB="-lpmpi++"
    MPI2CPP_INSTALLED_LIB="-l${MPI_MIDDLE_NAME}pmpi++"
else
    AC_DEFINE(_MPIPP_PROFILING_, 0) 
    MPI2CPP_LIBRARY="libmpi++.a"
    MPI2CPP_LIB="-lmpi++"
    MPI2CPP_INSTALLED_LIB="-l${MPI_MIDDLE_NAME}mpi++"
fi
AC_SUBST(WANT_PROFILE)
AC_SUBST(MPI2CPP_LIBRARY)
AM_CONDITIONAL(WANT_PROFILING, test "$WANT_PROFILE" = "yes")
AC_MSG_RESULT([$WANT_PROFILE])

#
# We need to do a bunch of tests with <mpi.h> and "-lmpi", so
# temporarily change the CXXFLGAS.  Restore them later before they get
# substituted into various Makefiles.
#

CXXFLAGS_SAVE="$CXXFLAGS"
CXXFLAGS="$CXXFLAGS $MINI_BALKY_CXXFLAGS"

#
# Setup C++ compiler
#

if test "$CXX" = "" -a "$MPI_CXX" != ""; then
    CXX=$MPI_CXX
fi

#
# $%@#!@#% AC_PROG_CXX changes CXXFLAGS...
#

LOCAL_CXXFLAGS_SAVE=$CXXFLAGS
CXXFLAGS="$CXXFLAGS"
AC_PROG_CXX
AC_PROG_CXXCPP
CXXFLAGS="$LOCAL_CXXFLAGS_SAVE"
AC_AIX
AC_PROG_LN_S

BALKY_CXX=$CXX
AC_SUBST(BALKY_CXX)


#
# See if the compiler makes template repository directories
#

LSC_CXX_TEMPLATE_REPOSITORY


#
# Force automake to delete emacs ~ files at "make clean"
#

CLEANFILES='-r *~ $(TEMPLATE_REP)'
AC_SUBST(CLEANFILES)


#
# Exception handling flags
#

if test "$UNDERLYING_CXX" != ""; then
    CXX_save="$CXX"
    CXX="$UNDERLYING_CXX";
fi
LSC_CHECK_CXX_EXCEPTION_FLAGS
if test "$UNDERLYING_CXX" != ""; then
    CXX="$CXX_save";
fi


EXCPTN_CXXFLAGS=$LSC_EXCEPTION_CXXFLAGS
CXXFLAGS="$EXCPTN_CXXFLAGS $CXXFLAGS"
EXCPTN_LDFLAGS="$LSC_EXCEPTION_LDFLAGS"


#
# Check to see if this compiler can handle exceptions 
#

# Since our errhandling test in the testsuite fails
# when compiling with g++ (both 2.8 and with egcs)
# we'll specify no exceptions for g++
#
# This needs to test for the problem, so that when g++/egcs is fixed, this
# will still work! - WDG
#
# I Agree! - PWR

AC_MSG_CHECKING([for throw/catch])
AC_TRY_COMPILE(, int i=1; throw(i);, have_excep=yes, have_excep=no)
if test "$GXX" = "yes"; then
    AC_DEFINE(_MPIPP_USEEXCEPTIONS_, 0)
    AC_MSG_RESULT([no (g++ exceptions broken)])
elif test "$have_excep" = "yes"; then
    AC_DEFINE(_MPIPP_USEEXCEPTIONS_, 1)
    AC_MSG_RESULT([yes])
else
    AC_DEFINE(_MPIPP_USEEXCEPTIONS_, 0)
    AC_MSG_RESULT([no])
fi


#
# Set final compiler flags
#

MINI_BALKY_CXXFLAGS="$EXCPTN_CXXFLAGS $EXTRA_CXXFLAGS $MPI_CXXFLAGS -I`pwd`/src $MINI_BALKY_CXXFLAGS"
BALKY_CXXFLAGS="$EXCPTN_CXXFLAGS $EXTRA_CXXFLAGS $MPI_CXXFLAGS -I$INSTALLDIR/include $CXXFLAGS_SAVE $BALKY_CXXFLAGS"

CXXFLAGS_SAVE="$CXXFLAGS_SAVE $MPI_CXXFLAGS"
CXXFLAGS="$CXXFLAGS $MPI_CXXFLAGS"
DEPFLAGS="$CXXFLAGS_SAVE"

AC_SUBST(MINI_BALKY_CXXFLAGS)
AC_SUBST(BALKY_CXXFLAGS)
AC_SUBST(DEPFLAGS)


#
# Try to compile with the Balky flags, see if we can find <mpi.h>
#

LSC_CHECK_MPI_H


#
# Look for extra libraries
#

if test "$WANT_SOCKET_LIBS" = "1"; then
    AC_CHECK_LIB(socket, getservbyname, socket_lib="-lsocket", socket_lib="")
    AC_CHECK_LIB(nsl, gethostbyaddr, nsl_lib="-lnsl", nsl_lib="")
fi
if test "$WANT_THREAD_LIBS" = "1"; then
    AC_CHECK_LIB(thread, sigwait, thread_lib="-lthread", thread_lib="")
fi
EXTRA_LIBS="$socket_lib $nsl_lib $thread_lib"


#
# Set final linker flags
#

LDFLAGS="$LDFLAGS $MPI_LDFLAGS"
LIBS="$MPI_LIBS $EXTRA_LIBS"

MINI_BALKY_LDFLAGS="$EXCPTN_LDFLAGS $EXTRA_LDFLAGS $MPI_LDFLAGS -L`pwd`/src $MPI2CPP_LIB $MPI_LIBS $EXTRA_LIBS $LDFLAGS"
BALKY_LDFLAGS="$EXCPTN_LDFLAGS $EXTRA_LDFLAGS $MPI_LDFLAGS -L$INSTALLDIR/lib $MPI2CPP_INSTALLED_LIB $MPI_LIBS $EXTRA_LIBS $LDFLAGS"

AC_SUBST(MINI_BALKY_LDFLAGS)
AC_SUBST(BALKY_LDFLAGS)

#
# Try to link with the Balky flags, see if we can find libmpi.*
# (if necessary)
#

#
# This test should be skipped if we're within an MPI build (because the
# library may not have been built when we do this configure).
# 
if test "$MPI_LIBS" != "" -a "$USING_MPICH" != 1 ; then
    LSC_CHECK_LMPI
fi


#
# Override optimization flags, if supplied
#

AC_ARG_WITH(opt,	[--without-opt		Compile with no optimization (for debugging)], withoutopt=$withval, withoutopt=$withval)
if test "$withoutopt" = "no"; then
    OPTFLAGS="$NOOPT" 
    TEST_OPTFLAGS="$NOOPT" 
    EXAM_OPTFLAGS="$NOOPT"
fi
AC_ARG_WITH(libopt,     [--with-libopt		Opt flags for use when compiling libmpi++.a], OPTFLAGS=$withval)
AC_ARG_WITH(testopt,    [--with-testopt		Opt flags for use when compiling test suite], TEST_OPTFLAGS=$withval)
AC_ARG_WITH(examopt,    [--with-examopt		Opt flags for use when compiling examples], EXAM_OPTFLAGS=$withval)
AC_SUBST(OPTFLAGS)
AC_SUBST(TEST_OPTFLAGS)
AC_SUBST(EXAM_OPTFLAGS)


#
# At least one implementation has this problem
# (no names mentioned...)
#

LSC_MPI_ERR_PENDING
if test "$LSC_HAVE_PENDING" = "1"; then
    AC_DEFINE(MPI2CPP_HAVE_PENDING, 1)
else
    AC_DEFINE(MPI2CPP_HAVE_PENDING, 0)
fi


#
# Check for MPI_GET_VERSION
#

AC_MSG_CHECKING([for MPI_GET_VERSION])
AC_TRY_LINK([#include<mpi.h>],
[int v, s; MPI_Get_version(&v, &s);],
[HAVE_GET_VERSION=1], [HAVE_GET_VERSION=1])
AC_DEFINE_UNQUOTED(MPI2CPP_HAVE_MPI_GET_VERSION, $HAVE_GET_VERSION)
if test "$HAVE_GET_VERSION" = "1"; then
    AC_MSG_RESULT([yes])
else
    AC_MSG_RESULT([no])
fi


#
# See if we have MPI_STATUS_IGNORE / MPI_STATUSES_IGNORE
#
# Unfortunately, the implementation of STATUS_IGNORE in MPICH is
# broken.  Can't really figure out a good way how to have a generic
# test to see if the underlying MPI has a broken STATUS_IGNORE because
# there are so many different ways to run a different MPI program (and
# it depends on several variables in the users' setup).  So we just
# have to put in a hardwired "if MPICH, don't use MPI_STATUS_IGNORE"
# switch.  This will probably have to be removed in the future.  Ick.
#

if test "$USING_MPICH" = "1"; then
    AC_MSG_CHECKING([for MPI_STATUS_IGNORE])
    AC_DEFINE(MPI2CPP_HAVE_STATUS_IGNORE, 0)
    AC_MSG_RESULT([yes, but broken])
    
    AC_MSG_CHECKING([for MPI_STATUSES_IGNORE])
    AC_DEFINE(MPI2CPP_HAVE_STATUSES_IGNORE, 0)
    AC_MSG_RESULT([yes, but broken])
else
    AC_MSG_CHECKING([for MPI_STATUS_IGNORE])
    AC_TRY_LINK([#include <mpi.h>],[MPI_Status *foo = MPI_STATUS_IGNORE;],
    [HAVE_STATUS_IGNORE=1],[HAVE_STATUS_IGNORE=0])
    AC_DEFINE_UNQUOTED(MPI2CPP_HAVE_STATUS_IGNORE, $HAVE_STATUS_IGNORE)
    if test "$HAVE_STATUS_IGNORE" = "1"; then
	AC_MSG_RESULT([yes])
    else
	AC_MSG_RESULT([no])
    fi
    AC_MSG_CHECKING([for MPI_STATUSES_IGNORE])
    AC_TRY_LINK([#include <mpi.h>],[MPI_Status *foo = MPI_STATUSES_IGNORE;],
    [HAVE_STATUSES_IGNORE=1],[HAVE_STATUSES_IGNORE=0])
    AC_DEFINE_UNQUOTED(MPI2CPP_HAVE_STATUSES_IGNORE, $HAVE_STATUSES_IGNORE)
    if test "$HAVE_STATUSES_IGNORE" = "1"; then
	AC_MSG_RESULT([yes])
    else
	AC_MSG_RESULT([no])
    fi
fi

#
# Find out how to make libraries
#

AC_PROG_INSTALL
# Override the buggy /bin/installbsd in AIX
case "$host" in
    rs6000-ibm-aix*)
        if test "$INSTALL" = "/bin/installbsd" -o \
            "$INSTALL" = "/bin/installbsd -c" -o \
            "$INSTALL" = "/usr/bin/installbsd" -o \
            "$INSTALL" = "/usr/bin/installbsd -c" -o \
            "$INSTALL" = "/bin/install" -o \
            "$INSTALL" = "/bin/install -c" -o \
            "$INSTALL" = "/etc/install" -o \
            "$INSTALL" = "/etc/install -c" -o \
            "$INSTALL" = "/usr/bin/install" -o \
            "$INSTALL" = "/usr/bin/install -c" -o \
            "$INSTALL" = "/usr/ucb/install" -o \
            "$INSTALL" = "/usr/ucb/install -c"; then
            AC_MSG_WARN([overriding buggy AIX $INSTALL... ./install-sh -c])
            INSTALL="./install-sh -c"
        fi

	AC_DEFINE(MPI2CPP_AIX, 1)
        ;;

    *aix*)
	AC_DEFINE(MPI2CPP_AIX, 1)
	;;
esac
AC_PROG_RANLIB
AC_CHECK_PROG(AR, ar, ar, ;)
AC_PATH_PROG(BINSH, sh)


#
# Various compiler checks
#
# Check for the "bool" type, and for the items "true" and "false"
# Autoconf 2.9 AC-CHECK-TYPE is buggy, hence this workaround
#

LSC_CHECK_CXX_BOOL
if test "$LSC_HAVE_BOOL" = "1"; then
    AC_DEFINE(MPI2CPP_HAVE_BOOL, 1)
    BOOL_TYPE="bool"
else
    AC_DEFINE(MPI2CPP_HAVE_BOOL, 0)
    BOOL_TYPE="unsigned int"
fi
AC_DEFINE_UNQUOTED(MPI2CPP_BOOL_T, $BOOL_TYPE)


#
# Check to see if the resulting bool type is the same size as an int
# Just to make it easy (and uniform), always check, even if this compiler
# does not have a native "bool" type.
#
# I don't know why autoconf is forcing me to put in cross compiling sizes!
# Reset the LDFLAGS and LIBS arguments so that we don't get -lmpi or
# other extraneous libraries in the test executables.
#

SAVE_LDFLAGS=$LDFLAGS
SAVE_LIBS=$LIBS
LDFLAGS=
LIBS=

MPI2CPP_GET_SIZEOF(int, MPI2CPP_SIZEOF_INT)
MPI2CPP_GET_SIZEOF(MPI2CPP_BOOL_T, SIZEOF_MPI2CPP_BOOL_T)

LDFLAGS=$SAVE_LDFLAGS
LIBS=$SAVE_LIBS


#
# MPI says that attributes will be at least as large as pointers.
# If we're on a 64 bit system, the pointers may be 8 bytes, not 4.
# Attributes must be typed/sized appropriately.
#

AC_MSG_CHECKING([type of MPI attributes])
AC_TRY_RUN(int main() 
{
  if (sizeof(int) != sizeof(int *))
    return -1;
  return 0;
}, sizeof_same=yes, sizeof_same=no, sizeof_same=no)
if test "$sizeof_same" = "yes"; then
    ATTR_TYPE="int"
    AC_DEFINE(MPI2CPP_ATTR, int)     
else
    ATTR_TYPE="long"
    AC_DEFINE(MPI2CPP_ATTR, long)
fi
AC_MSG_RESULT([$ATTR_TYPE])


#
# Do we have BSD or SYSV style signals?
# (or something that we haven't thought of yet?)
#

AC_MSG_CHECKING([for signal declaration])
AC_TRY_COMPILE(#include<signal.h>
extern "C" void bsd_handler(int sig, int code, struct sigcontext *scp, char *addr);
, 
signal(1, bsd_handler);
  struct sigaction n;
  n.sa_handler= bsd_handler;
, bsd_signal="yes", bsd_signal="no")
if test "$bsd_signal" = "yes"; then
    AC_DEFINE(MPI2CPP_BSD_SIGNAL, 1)
    AC_MSG_RESULT([BSD])
else
#
# Sanity check.  Make sure that it is SYSV
#

AC_TRY_COMPILE(#include<signal.h>
extern "C" void sysv_handler(int sig) {};
, 
signal(1, sysv_handler);
, sysv_signal="yes", sysv_signal="no")
    if test "$sysv_signal" = "yes"; then
        AC_DEFINE(MPI2CPP_SYSV_SIGNAL, 1)
        AC_MSG_RESULT([SYSV])
    else
        AC_MSG_RESULT([not found])
        AC_MSG_ERROR([cannot determine if signals are bsd/sysv])
        exit
    fi
fi

#
#  Check for namespaces
#  @#%$@#^ g++!  It has namespaces, but is VERY broken
#

FORCE_NAMESPACE=
AC_ARG_WITH(namespace,  [--with-namespace        Force the use of C++ namespaces], FORCE_NAMESPACE=$withval)

AC_MSG_CHECKING([for namespace support])
if test "$FORCE_NAMESPACE" = "yes"; then
    AC_DEFINE(_MPIPP_USENAMESPACE_, 1)
    AC_MSG_RESULT([yes (forced)])
elif test "$FORCE_NAMESPACE" = "no"; then 
    AC_DEFINE(_MPIPP_USENAMESPACE_, 0)
    AC_MSG_RESULT([no (forced)])
else
    AC_TRY_COMPILE([void blah();
namespace N {
  extern const int global;
  class foo {
    //g++ does not like :: operator for global scope
    // but I think I can work around this
    //    friend void ::blah();
  public:
    static int foobar();
  };
  // Sun CC 5.0 has problem with overloaded static namespace functions
  static inline int foofoo();
  static inline int foofoo(int yow, double baz);
}

//aCC con't handle the following line confuses namespaces and classes
const int N::global = 0;

//g++ does not like namespace'd return types
N::foo blahblah() { N::foo f; return f; }
//g++ does not like functions of classes in namespaces
int N::foo::foobar() { return 1; }
inline int N::foofoo() { return 0; }
inline int N::foofoo(int, double) { return 0; }
void blah() { }]
,  , namespace_found=yes, namespace_found=no)
    if test "$namespace_found" = "yes"; then
	AC_DEFINE(_MPIPP_USENAMESPACE_, 1)
	AC_MSG_RESULT([yes])
    else
	AC_DEFINE(_MPIPP_USENAMESPACE_, 0)
	AC_MSG_RESULT([no])
    fi
fi

#
# Test to see if the no namespace workaround will work.  If not (broken g++
# version 2.7.2 and others), exit so that the user won't waste time
if test "$namespace_found" = "no" ; then
    AC_MSG_CHECKING([that workaround for missing namespace works])
    AC_TRY_COMPILE([
class PMPI {
    public:
    class Comm;
   class Comm {
       public:
       typedef void Efn( Comm& );
   };
};
class MPI { 
    public:
    class Comm;
    class Comm {
       public:
       typedef void Efn( Comm& );
    };
};],[int a=0;],
[AC_MSG_RESULT(yes)],
[AC_MSG_RESULT(no)
AC_MSG_ERROR([C++ interface requires working namespace or nested classes])]
)
fi

#
# Check to see if the FORTRAN constants are there, 
# and then check for the optional FORTRAN constants.
#

AC_MSG_CHECKING([for FORTRAN constants])
AC_TRY_COMPILE(#include <mpi.h>
, MPI_Datatype a = MPI_INTEGER;, fortran_found=yes, fortran_found=no)
if test "$fortran_found" = "yes"; then
    AC_DEFINE(MPI2CPP_FORTRAN, 1)
    AC_MSG_RESULT([yes])
    AC_MSG_CHECKING([for optional FORTRAN constants])
    AC_TRY_COMPILE(#include <mpi.h>
    , MPI_Datatype b = MPI_8REAL;, all_found=yes, all_found=no)
    if test "$all_found" = "yes"; then
	AC_DEFINE(MPI2CPP_ALL_OPTIONAL_FORTRAN, 1)
	AC_MSG_RESULT([all])
    else
	AC_DEFINE(MPI2CPP_ALL_OPTIONAL_FORTRAN, 0)
	AC_TRY_COMPILE(#include <mpi.h>
	, MPI_Datatype c = MPI_2REAL;, some_found=yes, some_found=no)
	if test "$some_found" = "yes"; then
	    AC_DEFINE(MPI2CPP_SOME_OPTIONAL_FORTRAN, 1)
	    AC_MSG_RESULT([some])
	else
	    AC_DEFINE(MPI2CPP_SOME_OPTIONAL_FORTRAN, 0)
	    AC_MSG_RESULT([none])
	fi
    fi
else
    AC_DEFINE(MPI2CPP_FORTRAN, 0)
    AC_MSG_RESULT([no])
fi

#
# Check for optional C stuff.
#

AC_MSG_CHECKING([for optional C constants])
AC_TRY_COMPILE(#include <mpi.h>
, MPI_Datatype d = MPI_UNSIGNED_LONG_LONG; MPI_Datatype e = MPI_LONG_LONG;, c_found=yes, c_found=no)
if test "$c_found" = "yes"; then
    AC_DEFINE(MPI2CPP_OPTIONAL_C, 1)
    AC_MSG_RESULT([yes])
else
    AC_DEFINE(MPI2CPP_OPTIONAL_C, 0)
    AC_MSG_RESULT([no])
fi
CXXFLAGS=$CXXFLAGS_SAVE

#
# Substitute them in...
#

AC_SUBST(MPI_CXX)
AC_SUBST(MPILIB_DIR)

AC_SUBST(INSTALL)
AC_SUBST(AR)
AC_SUBST(RANLIB)

AC_SUBST(DEFS)

AC_SUBST(TOPDIR)
AC_SUBST(INSTALLDIR)
AC_SUBST(IV_DESTRUCTORS)
AC_SUBST(TEMPLATE_REP)


#
# Party on
#

AC_OUTPUT([Makefile
    src/Makefile
    src/mpi2c++/Makefile
    contrib/Makefile
    contrib/test_suite/Makefile
    contrib/examples/Makefile
    balky/Makefile
    balky/balky
    balky/mini-balky], [chmod +x balky/balky balky/mini-balky])
