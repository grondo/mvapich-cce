#!/bin/bash

set -x

# Most variables here can be overridden by exporting them in the environment
# before running this script.  Default values have been provided if the
# environment variable is not already set.

source ./make.mvapich.def

# The target architecture.  If not exported outside of this script,
# it will be found automatically or prompted for if necessary.
# Supported: "_IA32_", "_IA64_", "_EM64T_", "_X86_64_"
#
if [ -z "$ARCH" ]; then
    arch
fi

# Mandatory variables.  All are checked except CXX and F90.
IBHOME=${IBHOME:-/usr}
IBHOME_LIB=${IBHOME_LIB:-/usr/lib64}
PREFIX=${PREFIX:-/usr/local/mvapich}
export CC=${CC:-gcc}
export CXX=${CXX:-g++}
export F77=${F77:-g77}
export F90=${F90:-}

# This is necessary if F90 and F77 are both gfortran.
if [ "$F90" = "gfortran" ] && [ "$F77" = "gfortran" ]; then
    export F77_GETARGDECL=" "
fi

if [ $ARCH = "SOLARIS" ]; then
    die_setup "MVAPICH GEN2 is not supported on Solaris."
elif [ $ARCH = "MAC_OSX" ]; then
    die_setup "MVAPICH GEN2 is not supported on MacOS."
fi

#
# Compiler specific flags. If you are using
# ICC on IA64 platform, please set COMPILER_FLAG
# to "icc"
#

COMPILER_FLAG=${COMPILER_FLAG:-}

if [ "$COMPILER_FLAG" == "icc" ]; then
       COMPILER_FLAG="-D_ICC_"
else
       COMPILER_FLAG=""
fi

# Check mandatory variable settings.
if [ -z "$IBHOME" ] || [ -z "$PREFIX" ] || [ -z "$CC" ] || [ -z "$F77" ]; then
    die_setup "Please set mandatory variables in this script."
elif [ ! -d $IBHOME ]; then
    die_setup "IBHOME directory $IBHOME does not exist."
fi

# Optional variables.
#

# Whether or not to build with shared library support.  Disabled by default.
# Enabled with "yes".
SHARED_LIBS=${SHARED_LIBS:-}

if [ "$SHARED_LIBS" = "yes" ]; then
    SHARED_LIBS="--enable-sharedlib"
else
    SHARED_LIBS=""
fi

# Whether to enable ROMIO support.  This is necessary if building the
# F90 modules.
ROMIO_FS="nfs+ufs"
if [ -f /usr/include/pan_fs_client_statfs.h ]; then
    ROMIO_FS="panfs+${ROMIO_FS}"
fi
if [ -f /usr/include/lustre/lustre_user.h ]; then
	ROMIO_FS="lustre+${ROMIO_FS}"
fi

if [ -n "$F90" ]; then
    ROMIO="--with-romio --with-file-system=${ROMIO_FS}"
else
    if [ "$ROMIO" = "yes" ]; then
	ROMIO="--with-romio"
    else
	ROMIO="--without-romio"
    fi
fi

# PTMALLOC support for MVAPICH2 memory hooks.  Enabling this will allow
# MVAPICH2 to release memory to the Operating System (when registration
# cache is enabled).  Enabled by default.  Disable with "no".
PTMALLOC=${PTMALLOC:-}

if [ "$PTMALLOC" = "no" ]; then
    PTMALLOC="-DDISABLE_PTMALLOC"
else
    PTMALLOC=""
fi


# Set this to override automatic optimization setting (-03).
OPT_FLAG=${OPT_FLAG:--O3}

export LIBS=${LIBS:--L${IBHOME_LIB} -lpthread -lpsm_infinipath}
export CFLAGS=${CFLAGS:--D${ARCH} ${COMPILER_FLAG} -D_SMP_ -DCH_PSM -I${IBHOME}/include $OPT_FLAG}

export MPIRUN_CFLAGS="${MPIRUN_CFLAGS} ${OPT_FLAG} -DLD_LIBRARY_PATH_MPI=\\\"${PREFIX}/lib/shared\\\" -DPARAM_GLOBAL=\\\"${PREFIX}/etc/mvapich.conf\\\""

# Prelogue
make distclean &>/dev/null
set -o pipefail

# Configure MVAPICH

echo "Configuring MVAPICH..."

./configure --with-device=ch_psm --with-arch=LINUX -prefix=${PREFIX} \
       $ROMIO --enable-sharedlib --enable-debug --without-mpe -lib="$LIBS" 2>&1 |tee config-mine.log
ret=$?
test $ret = 0 ||  die "configuration."

# Build MVAPICH
echo "Building MVAPICH..."
make 2>&1 |tee make-mine.log 
ret=$?
test $ret = 0 ||  die "building MVAPICH."

# Install MVAPICH
echo "MVAPICH installation..."
rm -f install-mine.log 
make install 2>&1 |tee install-mine.log
ret=$?
test $ret = 0 ||  die "installing MVAPICH."

for lib in mpich fmpich pmpich pmpich++; do
   echo Checking for ${DESTDIR}/${PREFIX}/lib/shared/lib${lib}.so
   [ -f ${DESTDIR}/${PREFIX}/lib/shared/lib${lib}.so ] || \
        die "MVAPICH install Missing lib${lib}.so"
done

exit 0
