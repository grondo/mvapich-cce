#! /bin/sh
#
# This script has to be built by configure.
#
# This is a script to install MPE Profiling Environment. It can be invoked with
#
#    make install  ( if you used -prefix at configure time )
#
#    or,
#
#    make install PREFIX=Path_to_the_installation_of_MPE
#
# in the top-level MPE __build__ directory which could be the same
# or different from the source directory
#
 
MAKE="@MAKE@"

# Location of sources
# top_srcdir=@top_srcdir@
top_srcdir=@top_srcdir_abs@       # in absolute path

# Build locations
includebuild_dir=@includebuild_dir@
libbuild_dir=@libbuild_dir@
binbuild_dir=@binbuild_dir@
sbinbuild_dir=@sbinbuild_dir@

# Installation directories: Default paths (set at configure time)
prefix=@prefix@
exec_prefix=@exec_prefix@
includedir=@includedir@
libdir=@libdir@
bindir=@bindir@
sbindir=@sbindir@
datadir=@datadir@
sysconfdir=@sysconfdir@

PROF_LIBNAME=@PROF_LIBNAME@
CPRP="@CPRP@"
MPI_IMPL=@MPI_IMPL@
NOF77=@NOF77@
LOGVIEWERS=@LOGVIEWERS@
SLOG2TOOLS=@SLOG2TOOLS@
MPE_HEADERS="@MPE_HEADERS@"

# File access mode
MODE=0644
XMODE=0755
replace=1
# set failmode to soft to let failures accumulate
failmode="hard"
# chmod can fail for various reasons.  Let it?
chmodfailmode="hard"
Show=eval
# set verbose to 0 to suppress success output
verbose=0
just_testing=0
prefix_override=0

# filelist records files that have been installed
filelist=""
# dirlist records directories created
dirlist=""
# cmdlist records commands to be carried out during uninstall
cmdlist=""
# initialize the error code return counter
errs=0

# The variable, appendUninstall, is to signal this script to allow uninstall
# information to append to an existing uninstall file.  Default is NO.
appendUninstall=0

# Set uninstall file
# Should replace basename which is NOT available on all machine ?
# Is ok for now. Popular Unix boxes, AIX, solaris, Linux, all have basename
if [ -z "$UNINSTALLFILE" ] ; then
    INSTALL_base=`basename $0`
    UNINSTALL_base=`echo $INSTALL_base | sed -e 's/install/uninstall/'`
    UNINSTALLFILE=$DESTDIR${sbindir}/${UNINSTALL_base}
fi

for arg in "$@" ; do
    case "$arg" in
	-prefix=*)
	    prefix=`echo $arg | sed -e 's/-prefix=//g'` 
	    if [ "$prefix" != "@prefix@" ] ; then
  	        prefix_override=1
	    fi
	    ;;
	-uninstall=*)
	    UNINSTALLFILE=`echo A$arg | sed -e 's/A-uninstall=//g'` 
	    appendUninstall=1
	    ;;
	-mode=*)
	    MODE=`echo $arg | sed -e 's/-mode=//g'`
	    ;;
	-xmode=*) 
	    XMODE=`echo $arg | sed -e 's/-xmode=//g'` 
	    ;;
	-t)
	    Show=echo ; just_testing=1 ; failmode="soft"
	    ;;
	-noman)                   noman=1 ;;
	-echo)                    set -x ;;
	-noreplace|-no_replace)   replace=0 ;;
	-replace)                 replace=1 ;;
        -no_verbose|-noverbose)   verbose=0 ;;
	-verbose)                 verbose=1 ;;
	-soft)                    failmode="soft" ; chmodfailmode="soft" ;;
	-hard)                    failmode="hard" ; chmodfailmode="hard" ;;
	-softchmod)               chmodfailmode="soft" ;;
	-help|-u|-usage|-h)
cat <<EOF
Install MPE into $prefix.
-prefix=path     - Destination directory.
-uninstall=file  - File to append uninstall information to
-mode=nnnn       - mode for regular files.  Default is $MODE .
-xmode=nnnn      - mode for execuables and directories.  Default is $XMODE .
-t               - Try only; do no installation.
-manpath=path    - Set an alternate path for the man pages
-noman           - Do not install the man pages.
-noreplace       - Do not replace files found in the installation directory
-soft            - Do not abort on failure
-softchmod       - Do not abort on failure of chmod
EOF
	    exit 1
	    ;;
	*)
	    # Silently skip empty arguments (these can occur on
	    # some systems and within some scripts; they are
	    # harmless)
	    if [ -n "$arg" ] ; then
  	        echo "mpeinstall: Unrecognized argument $arg ."
	        exit 1
	    fi
	    ;;
    esac
done



if [ "$SHELL_ECHO" = "on" ] ; then 
    set -x 
fi

##############################################################################
#
# Start of Routines
#
##############################################################################

# We could use install, but install is too different and too hard to 
# test.  So here are the routines to copy file, make directories, and 
# replace #...# and @...@ in files
CP=cp
#
CopyFile() {
if [ -z "$3" ] ; then
    mode=$MODE
else
    mode=$3
fi
dest=$DESTDIR$2
if [ -d $dest ] ; then
    dest=$dest/`basename $1`
else
    dest=$dest
fi
if [ $replace = 0 -a -f $dest ] ; then
    if [ $verbose = 1 ] ; then echo "$dest exists; not changed" ; fi
elif [ -d $1 ] ; then
    echo ">>> $1 is a directory; not copied <<<"
    errs=`expr $errs + 1`
    if [ $failmode = "hard" ] ; then exit 1 ; fi
elif [ ! -f $1 ] ; then 
    echo "**File $1 does not exist (or is not a regular file)!"
    errs=`expr $errs + 1`
    if [ $failmode = "hard" ] ; then exit 1 ; fi
else
    if [ $verbose = 1 ] ; then echo "Copying $1 to $dest" ; fi
    if [ -f $dest ] ; then $Show rm -f $dest ; fi
    $Show $CP $1 $dest
    rc=$?
    if [ $rc != 0 ] ; then
	echo "**Error copying file $1 to $dest **"
        errs=`expr $errs + 1`
        if [ $failmode = "hard" ] ; then exit $rc ; fi
    else
        # store the destination filename copied
        filelist="$filelist $dest"
    fi
    $Show chmod $mode $dest
    rc=$?
    if [ $rc != 0 ] ; then
	echo "**Error setting mode to $mode on file $dest**"
        errs=`expr $errs + 1`
        if [ $chmodefailmode = "hard" ] ; then exit $rc ; fi
    fi
fi
}


#
# A version of copy file that preserves file dates
CopyFileP() {
    CP="$CPRP -p"
    CopyFile $1 $2 $3
    CP=cp
}


#
# A version of recursive directory copy that preserves file dates
# but does NOT copy CVS, old, tex directory.
# $1 is the src directory, $2 is dest directory, $3 is $MODE or $XMODE
CopyDirRecurP() {
if [ -n "$1" -a -n "$2" ] ; then
    if [ -d $1 ] ; then
        MkDir $2
        # use $4 as a local variable
        # & set it as the original PWD before "cd $1"
        set $1 $2 ${3:-$MODE} `pwd`
        cd $1
        for file in * ; do
            if [ -f $file -a ! -f $DESTDIR$2/$file ] ; then
                CopyFileP $file $2/$file $3
            fi
        done
        for dir in * ; do
            if [ -d $dir \
                 -a "$dir" != "CVS" -a "$dir" != "old" \
                 -a "$dir" != "tex" \
               ] ; then
                CopyDirRecurP $dir $2/$dir $3
            fi
        done
        # cd back where it comes from
        # counter the effect of "cd $1" above,
        # so "for" loop still works
        cd $4
    fi 
fi
}

#
# Make the given directory.  This handles building intermediate directories
# as required, and maintains a list of created directories in dirlist.
MkDir() {
if [ ! -d $DESTDIR$1 ] ; then
    dir=`echo $DESTDIR$1 | sed 's%/% /%g'`
    path_to_date=''
    for path in $dir ; do
        path_to_date="$path_to_date$path"
        if [ ! -d $path_to_date ] ; then
            if [ $verbose = 1 ] ; then echo "Creating directory $1" ; fi
            $Show "mkdir $path_to_date"
            rc=$?
            if [ $rc != 0 ] ; then
                echo "**Error making directory $1**"
                errs=`expr $errs + 1`
                if [ $failmode = "hard" ] ; then exit $rc ; fi
                echo "Failed to create directory $path_to_date"
                exit 1
            else
                # Note that we store in inverse order
                dirlist="$1 $dirlist"
            fi
            $Show chmod $XMODE $path_to_date
            rc=$?
            if [ $rc != 0 ] ; then
                echo "**Error setting mode to $XMODE on directory $path_to_date**"
                errs=`expr $errs + 1`
                if [ $chmodfailmode = "hard" ] ; then exit $rc ; fi
            fi
        fi
    done
fi
}



#
# Fixup files with various xxxxbuild_dir to xxxxdir, install directory.
#
FixInstallFile() {
dest=$DESTDIR$2
if [ -d $dest ] ; then
    dest=$dest/`basename $1`
else
    dest=$dest
fi
if [ $replace = 0 -a -f $dest ] ; then
    if [ $verbose = 1 ] ; then echo "$dest exists; not changed" ; fi
elif [ -d $1 ] ; then
    echo "$1 is a directory; not copied"
else
    if [ -f $dest ] ; then $Show rm -f $dest ; fi
    if [ $just_testing = 0 ] ; then \
        if [ "$MPI_IMPL" = "MPICH" -o "$MPI_IMPL" = "MPICH2" ] ; then
            sed \
            -e "s%^MPI_CC\([ ]*\)=\([ ]*\).*\$%MPI_CC\1=\2$bindir/mpicc%g" \
            -e "s%^MPI_F77\([ ]*\)=\([ ]*\).*\$%MPI_F77\1=\2$bindir/mpif77%g" \
            -e "s%^MPE_INCDIR\([ ]*\)=\([ ]*\).*\$%MPE_INCDIR\1=\2$includedir%g" \
            -e "s%^MPE_LIBDIR\([ ]*\)=\([ ]*\).*\$%MPE_LIBDIR\1=\2$libdir%g" \
            $1 > $dest
        else
            sed \
            -e "s%^MPE_INCDIR\([ ]*\)=\([ ]*\).*\$%MPE_INCDIR\1=\2$includedir%g" \
            -e "s%^MPE_LIBDIR\([ ]*\)=\([ ]*\).*\$%MPE_LIBDIR\1=\2$libdir%g" \
            $1 > $dest
        fi
        rc=$?
        if [ $rc != 0 ] ; then
	    echo "**** Error fixing up file $dest ****"
            errs=`expr $errs + 1`
            if [ $failmode = "hard" ] ; then exit $rc ; fi
        else
            # store the destination filename fixed
            filelist="$filelist $dest"
        fi
    else
	if [ $verbose = 1 ] ; then echo "Fixup $1 and copy to $dest" ; fi
    fi
fi
if [ -z "$3" ] ; then
    mode=$MODE
else
    mode=$3
fi
$Show chmod $mode $dest
rc=$?
if [ $rc != 0 ] ; then
    echo "**Error setting mode on file $2**"
    errs=`expr $errs + 1`
    if [ $failmode = "hard" ] ; then exit $rc ; fi
fi
}

	
##############################################################################
#
# End of routines
#
##############################################################################
if [ ! -s $libbuild_dir/lib${PROF_LIBNAME}.a ] ; then 
    echo "You must make MPE before installing it!"
    echo "Could not find $libbuild_dir/lib${PROF_LIBNAME}.a !"
    exit 1
fi

if [ ! -n "$prefix" ] ; then 
  echo "Set an installation location with -prefix=<location> ."
  exit 1
fi
if [ $verbose = 1 ] ; then
    echo "Install into $prefix"
fi

if [ -d $prefix ] ; then
    if [ $verbose = 1 ] ; then echo "using existing directory $prefix" ; fi
else
    MkDir $prefix
fi

# echo "prefix = $prefix"
# echo "exec_prefix = $exec_prefix"
# echo "includedir = $includedir"
# echo "libdir = $libdir"
# echo "bindir = $bindir"
# echo "sbindir = $sbindir"
# echo "datadir = $datadir"
# echo "sysconfdir = $sysconfdir"

# If the prefix was set, we want to override these choices
if [ "$prefix_override" = 1 ] ; then
    includedir=$prefix/include
    libdir=$prefix/lib
    bindir=$prefix/bin
    sbindir=$prefix/sbin
    datadir=$prefix/share
    if [ $appendUninstall = 0 ] ; then
        UNINSTALLFILE=${sbindir}/${UNINSTALL_base}
    fi
fi

# Copy MPE include Files
if [ -n "$includebuild_dir" ] ; then
    if [ -d $includebuild_dir ] ; then
        echo "Copying MPE include files to $includedir"
	if [ ! -d $DESTDIR$includedir ] ; then
	    MkDir $includedir
	fi
	for file in $MPE_HEADERS ; do
	    if [ -f $includebuild_dir/$file -a ! -f $DESTDIR$includedir/$file ] ; then
	        CopyFileP $includebuild_dir/$file $includedir/$file $MODE
	    fi
	done
    fi
fi

# Copy MPE libraries
if [ -n "$libbuild_dir" ] ; then
    if [ -d $libbuild_dir ] ; then
        echo "Copying MPE libraries to $libdir"
        CopyDirRecurP $libbuild_dir $libdir $MODE
    fi
fi

# Copy MPE utility programs
if [ -n "$binbuild_dir" ] ; then
    if [ -d $binbuild_dir ] ; then
         echo "Copying MPE utility programs to $bindir"
         CopyDirRecurP $binbuild_dir $bindir $XMODE
    fi
fi

MkDir $sbindir
MkDir $datadir

# Set the Examples directory where the sample MPE programs are located
examplesdir=$datadir/examples
MkDir $examplesdir

#
# Copy MPE Example C and Fortran programs
CopyDirRecurP $top_srcdir/contrib/test $examplesdir

# Create MPE examples Makefile
( cd $DESTDIR$examplesdir && \
  FixInstallFile $libbuild_dir/../contrib/test/Makefile $examplesdir/Makefile ) 
filelist="$filelist $examplesdir/Makefile"

if [ -x $bindir/mpirun ] ; then
    $Show "( cd $DESTDIR$examplesdir && \
             rm -f mpirun && \
             ln -s $bindir/mpirun mpirun )"
    filelist="$filelist $examplesdir/mpirun" 
fi

if [ -z "$DESTDIR" ]; then 
  if [ -f $DESTDIR$examplesdir/Makefile ] ; then
    echo "About to run installation test for C programs..."
    $Show "( cd $DESTDIR$examplesdir && $MAKE linktest_C )"
    if test "$NOF77" = "0" ; then
        echo "About to run installation test for Fortran programs..."
        $Show "( cd $examplesdir && $MAKE linktest_f77 )"
    fi
  fi
fi

# Remove old uninstall file
if [ "$appendUninstall" = 0 -a -f $UNINSTALLFILE ] ; then
    rm -f $UNINSTALLFILE
fi
#
# Open an uninstall file and force strong echo if one does NOT exist
if [ ! -f $UNINSTALLFILE ] ; then
    cat > $UNINSTALLFILE <<EOF
#! /bin/sh
set -x
EOF
fi

chmod u+x $UNINSTALLFILE

# Install the old log viewers if they exist
# Don't set the prefix if the default is chosen.  This
# lets us use --with-common-prefix with the viewers
if [ "$LOGVIEWERS" = 1 ] ; then
    if [ "$prefix_override" = "1" ] ; then
        ( cd $sbinbuild_dir/../viewers && \
          ./sbin/install-viewers -prefix=$prefix -uninstall=$UNINSTALLFILE \
          -mode=$MODE -xmode=$XMODE )
    else
        ( cd $sbinbuild_dir/../viewers && \
          ./sbin/install-viewers -uninstall=$UNINSTALLFILE \
          -mode=$MODE -xmode=$XMODE )
    fi
fi

# Install the SLOG-2 tools if they exist
# Don't set the prefix if the default is chosen.  This
# lets us use --with-common-prefix with the viewers
if [ -s $sbinbuild_dir/../slog2sdk -a $SLOG2TOOLS = 1 ] ; then
    if [ "$prefix_override" = "1" ] ; then
        ( cd $sbinbuild_dir/../slog2sdk && \
          ./sbin/install-package -prefix=$prefix -uninstall=$UNINSTALLFILE \
          -mode=$MODE -xmode=$XMODE -copymode=core)
    else
        ( cd $sbinbuild_dir/../slog2sdk && \
          ./sbin/install-package -uninstall=$UNINSTALLFILE \
          -mode=$MODE -xmode=$XMODE -copymode=core )
    fi
fi

if [ -s $DESTDIR$examplesdir/Makefile ] ; then
    echo "( cd $examplesdir && $MAKE clean )" >> $UNINSTALLFILE
fi

# Add the files to be removed to the UNINSTALLFILE
for file in $filelist ; do
    echo "rm -f $file" >> $UNINSTALLFILE
done

if [ "$appendUninstall" = 0 ] ; then
    echo "rm -f $sbindir/mpeuninstall" >> $UNINSTALLFILE
    echo "rm -f $UNINSTALLFILE" >> $UNINSTALLFILE
fi

# Add the directory removes to the UNINSTALL file
for dir in $dirlist ; do
    echo "if [ -d $dir ] ; then rmdir $dir ; fi" >> $UNINSTALLFILE
done
 
if [ "$appendUninstall" = 0 ] ; then
    cp $UNINSTALLFILE $sbinbuild_dir/mpeuninstall
#
    echo "Installed MPE in $prefix"
    echo "$UNINSTALLFILE may be used to remove the installation"
fi
 
if [ $errs -gt 0 ] ; then
    rc=1
else
    rc=0
fi
exit $rc
